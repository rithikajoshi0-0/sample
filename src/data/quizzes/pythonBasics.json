[
  {
    "phase": "Phase 1: Python Basics and Core Concepts",
    "topics": [
      {
        "topic": "1. Introduction to Python Programming",
        "subtopics": [
          {
            "subtopic": "Installing Python (Anaconda, PyCharm, or basic Python)",
            "questionsData": []
          },
          {
            "subtopic": "Setting up the IDE",
            "questionsData": []
          },
          {
            "subtopic": "Writing your first Python program: print(\"Hello, World!\")",
            "questionsData": [{
      "type": "fill",
      "question": "Python is an example of a __________ language, meaning it is executed line-by-line by an interpreter.",
      "answer": "interpreted",
      "component": "FillInTheBlank"
    },
    {
      "type": "multiple-choice",
      "question": "Which of the following is true about Python compared to compiled languages?",
      "options": [
        "Python code is translated into machine code before execution.",
        "Python code is executed line-by-line by an interpreter.",
        "Python requires a separate compilation step to run."
      ],
      "answer": "Python code is executed line-by-line by an interpreter.",
      "component": "MultipleChoiceQuestion"
    },
    {
      "type": "true-false",
      "question": "Python is a compiled language, meaning the entire program is converted into machine code before execution.",
      "answer": "False",
      "component": "TrueFalseQuestion"
    },
    {
      "type": "unscramble",
      "question": "Unscramble the words to form a correct statement about Python's execution:",
      "options": ["line-by-line", "executed", "Python", "is", "code", "by", "an", "interpreter"],
      "answer": ["Python", "code", "is", "executed", "line-by-line", "by", "an", "interpreter"],
      "component": "DragDropQuestion"
    },
    {
      "type": "multiple-choice",
      "question": "What is the main difference between Python and a compiled language like C++?",
      "options": [
        "Python requires an interpreter to run.",
        "Python requires a compiler to run.",
        "Python does not need any translation step."
      ],
      "answer": "Python requires an interpreter to run.",
      "component": "MultipleChoiceQuestion"
    },
    {
      "type": "match",
      "question": "Match the language to whether it uses an interpreter or a compiler for execution:",
      "options": [
        { "term": "Python", "match": "Interpreter" },
        { "term": "C++", "match": "Compiler" }
      ],
      "component": "MatchQuestion"
    },
    {
      "type": "multiple-selection",
      "question": "Which of the following are advantages of interpreted languages like Python? (Select all that apply)",
      "options": [
        "Easier to debug",
        "Faster execution",
        "Portability across different platforms"
      ],
      "answer": ["Easier to debug", "Portability across different platforms"],
      "component": "MultipleSelectionQuestion"
    },
    {
      "type": "order",
      "question": "Arrange the steps in the correct order for Python execution:",
      "options": [
        "Python code is written and saved in a .py file.",
        "The interpreter reads and executes the code line-by-line.",
        "The output is displayed on the screen."
      ],
      "correctOrder": [
        "Python code is written and saved in a .py file.",
        "The interpreter reads and executes the code line-by-line.",
        "The output is displayed on the screen."
      ],
      "component": "OrderQuestion"
    },
    {
      "type": "code-correction",
      "question": "What is wrong with this statement about Python?\n\nPython code is compiled into machine code before execution.",
      "options": [
        "Python code is not compiled.",
        "Python code is compiled into bytecode.",
        "Python code is executed by an interpreter."
      ],
      "answer": "Python code is not compiled.",
      "component": "CodeCorrectionQuestion"
    },
    {
      "type": "fill",
      "question": "Complete the code to demonstrate Python's execution process.\n\nOutput: `Python is an interpreted language!`",
      "answer": "print(\"Python is an interpreted language!\")",
      "component": "FillInTheBlank"
    }]
          },
          {
            "subtopic": "Python syntax, keywords, and comments",
            "questionsData": [
  {
    "type": "fill",
    "question": "What is the correct syntax to write a comment in Python?\n- `___ This is a comment`",
    "answer": "#",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid Python comment?",
    "options": [
      "# This is a comment",
      "// This is a comment",
      "/* This is a comment */"
    ],
    "answer": "# This is a comment",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Comments in Python are ignored by the Python interpreter.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Rearrange the words to create a valid Python comment:",
    "options": ["code", "this", "a", "is", "#"],
    "answer": ["#", "this", "is", "a", "code"],
    "component": "DragDropQuestion"
  },
  {
    "type": "fill",
    "question": "Which keyword is used to define a function in Python?\n- `___ my_function():`",
    "answer": "def",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are Python keywords? (Select all that apply)",
    "options": [
      "return",
      "print",
      "variable"
    ],
    "answer": ["return", "print"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What does the following code do?\n```python\n# This is a comment\nprint(\"Hello\")\n```",
    "options": [
      "Prints `# This is a comment`",
      "Prints `Hello`",
      "Gives an error"
    ],
    "answer": "Prints `Hello`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "code-correction",
    "question": "What's wrong with this comment?\n```python\n/ This is a comment\n```",
    "options": [
      "It needs to start with `#`",
      "The comment is outside the code block"
    ],
    "answer": "It needs to start with `#`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Which keyword is used to start a loop in Python?\n- `___ i in range(5):`",
    "answer": "for",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will this Python code output?\n```python\n# Print Hello\nprint(\"Hello\")\n```",
    "options": [
      "`# Print Hello`",
      "`Hello`"
    ],
    "answer": "`Hello`",
    "component": "MultipleChoiceQuestion"
  }
]
          },
          {
            "subtopic": "Python's interpreter vs. compiled languages",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to complete the statement about Python's execution process:\nPython is an example of a __________ language, meaning it is executed line-by-line by an interpreter.",
    "answer": "interpreted",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is true about Python compared to compiled languages?",
    "options": [
      "Python code is translated into machine code before execution.",
      "Python code is executed line-by-line by an interpreter.",
      "Python requires a separate compilation step to run."
    ],
    "answer": "Python code is executed line-by-line by an interpreter.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Python is a compiled language, meaning the entire program is converted into machine code before execution.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to form a correct statement about Python's execution:",
    "options": ["line-by-line", "executed", "Python", "is", "code", "by", "an", "interpreter"],
    "answer": ["Python", "code", "is", "executed", "line-by-line", "by", "an", "interpreter"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What is the main difference between Python and a compiled language like C++?",
    "options": [
      "Python requires an interpreter to run.",
      "Python requires a compiler to run.",
      "Python does not need any translation step."
    ],
    "answer": "Python requires an interpreter to run.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the language to whether it uses an interpreter or a compiler for execution:",
    "options": [
      { "term": "Python", "match": "Interpreter" },
      { "term": "C++", "match": "Compiler" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are advantages of interpreted languages like Python? (Select all that apply)",
    "options": [
      "Easier to debug",
      "Faster execution",
      "Portability across different platforms"
    ],
    "answer": ["Easier to debug", "Portability across different platforms"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order for Python execution:",
    "options": [
      "Python code is written and saved in a .py file.",
      "The interpreter reads and executes the code line-by-line.",
      "The output is displayed on the screen."
    ],
    "correctOrder": [
      "Python code is written and saved in a .py file.",
      "The interpreter reads and executes the code line-by-line.",
      "The output is displayed on the screen."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this statement about Python?\n```python\nPython code is compiled into machine code before execution.\n```",
    "options": [
      "Python code is not compiled.",
      "Python code is compiled into bytecode.",
      "Python code is executed by an interpreter."
    ],
    "answer": "Python code is not compiled.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to demonstrate Python's execution process.\nOutput: `Python is an interpreted language!`",
    "answer": "print(\"Python is an interpreted language!\")",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "2. Basic Data Types and Variables",
        "subtopics": [
          {
            "subtopic": "Numbers (integers, floats, complex)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a float variable in Python.\n- `x = ___`",
    "answer": "3.14",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid integer in Python?",
    "options": [
      "10.5",
      "10",
      "3 + 2j"
    ],
    "answer": "10",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, complex numbers are written with a `j` or `J` after the number.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python statement that assigns a complex number to a variable.",
    "options": ["+2j", "3", "=", "x"],
    "answer": ["x", "=", "3", "+2j"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\na = 5\nb = 3.2\nc = 2 + 3j\nprint(a + b)\n```",
    "options": [
      "`8.2`",
      "`53.2`",
      "`5 + 3.2j`"
    ],
    "answer": "`8.2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "x = 5; print(type(x))", "match": "<class 'int'>" },
      { "term": "y = 3.14; print(type(y))", "match": "<class 'float'>" },
      { "term": "z = 2 + 3j; print(type(z))", "match": "<class 'complex'>" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid numbers in Python? (Select all that apply)",
    "options": [
      "3",
      "4.2",
      "5 + 3j"
    ],
    "answer": ["3", "4.2", "5 + 3j"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create variables of type integer, float, and complex:",
    "options": [
      "Create a complex number: `z = 2 + 3j`",
      "Create a float: `y = 3.14`",
      "Create an integer: `x = 10`"
    ],
    "correctOrder": [
      "Create an integer: `x = 10`",
      "Create a float: `y = 3.14`",
      "Create a complex number: `z = 2 + 3j`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nx = 5.0\ny = 3\nprint(x + y)\n```",
    "options": [
      "There’s no error; the code will work fine",
      "`y` should be a float",
      "`x` should be an integer"
    ],
    "answer": "There’s no error; the code will work fine",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to display the following output:\n**Output**: `12.0`\n- `x = 7`\n- `y = ___`\n- `print(x + y)`",
    "answer": "5.0",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Strings",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to assign the string \"Python\" to a variable.\n- `x = ___`",
    "answer": "\"Python\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid string in Python?",
    "options": [
      "3.14",
      "\"Hello, World!\"",
      "10"
    ],
    "answer": "\"Hello, World!\"",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Strings in Python can be enclosed in single quotes (`'`) or double quotes (`\").",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python statement that assigns a string to a variable.",
    "options": ["\"World!\"", "\"Hello\"", "=", "x"],
    "answer": ["x", "=", "\"Hello World!\""],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nword = \"Python\"\nprint(word[1])\n```",
    "options": [
      "`P`",
      "`y`",
      "`t`"
    ],
    "answer": "`y`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "word = \"Python\"; print(word[0])", "match": "`P`" },
      { "term": "word = \"Python\"; print(word[-1])", "match": "`t`" },
      { "term": "word = \"Python\"; print(word[1:4])", "match": "`yth`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid string methods in Python? (Select all that apply)",
    "options": [
      "`upper()`",
      "`len()`",
      "`reverse()`"
    ],
    "answer": ["`upper()`", "`len()`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to use the `lower()` method on a string:",
    "options": [
      "Create a string: `word = \"HELLO\"`",
      "Call the `lower()` method: `word_lower = word.lower()`",
      "Print the result: `print(word_lower)`"
    ],
    "correctOrder": [
      "Create a string: `word = \"HELLO\"`",
      "Call the `lower()` method: `word_lower = word.lower()`",
      "Print the result: `print(word_lower)`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nword = \"Python\nprint(word)\n```",
    "options": [
      "The string is missing an ending quote",
      "The variable name is incorrect",
      "The print statement is misspelled"
    ],
    "answer": "The string is missing an ending quote",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to display the following output:\n**Output**: `Hello, Python!`\n- `word = ___`\n- `print(\"Hello, \" + word + \"!\")`",
    "answer": "\"Python\"",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Booleans",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to assign a boolean value of `True` to a variable.\n- `x = ___`",
    "answer": "True",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid boolean value in Python?",
    "options": [
      "`yes`",
      "`True`",
      "`1`"
    ],
    "answer": "`True`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The boolean value `False` is equivalent to the number `0` in Python.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that assigns a boolean value to a variable.",
    "options": ["`True`", "`=`", "`is_active`"],
    "answer": ["`is_active`", "`=`", "`True`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nis_raining = True\nif is_raining:\n    print(\"Bring an umbrella!\")\n```",
    "options": [
      "`Bring an umbrella!`",
      "`False`",
      "`Bring an umbrella`"
    ],
    "answer": "`Bring an umbrella!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`print(True and False)`", "match": "`False`" },
      { "term": "`print(True or False)`", "match": "`True`" },
      { "term": "`print(not True)`", "match": "`False`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following expressions will result in `True`? (Select all that apply)",
    "options": [
      "`True and False`",
      "`True or False`",
      "`not False`"
    ],
    "answer": ["`True or False`", "`not False`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to evaluate a boolean expression:",
    "options": [
      "Define a variable: `is_sunny = True`",
      "Evaluate the expression: `if is_sunny:`",
      "Print the result: `print(\"Go outside!\")`"
    ],
    "correctOrder": [
      "Define a variable: `is_sunny = True`",
      "Evaluate the expression: `if is_sunny:`",
      "Print the result: `print(\"Go outside!\")`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nis_active = \"True\"\nprint(is_active == True)\n```",
    "options": [
      "The string \"True\" is not a boolean value",
      "The boolean value is written incorrectly",
      "The equality operator is incorrect"
    ],
    "answer": "The string \"True\" is not a boolean value",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to display the following output:\n**Output**: `It's raining!`\n- `is_raining = ___`\n- `if is_raining: print(\"It's raining!\")`",
    "answer": "True",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Type conversion (int to float, string to int, etc.)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to convert the string \"25\" to an integer in Python.\n- `int(___)`",
    "answer": "\"25\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following will correctly convert the integer `3` to a float in Python?",
    "options": [
      "`float(3)`",
      "`str(3)`",
      "`int(3)`"
    ],
    "answer": "`float(3)`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "You can convert a string \"True\" directly to a boolean in Python.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that converts `100` to a string.",
    "options": ["`str`", "`100`", "`()`"],
    "answer": ["`str`", "`(`", "`100`", "`)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nx = \"3.14\"\ny = float(x)\nprint(y)\n```",
    "options": [
      "`3.14`",
      "`3`",
      "`string`"
    ],
    "answer": "`3.14`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`int(\"12\")`", "match": "`12`" },
      { "term": "`float(\"12.34\")`", "match": "`12.34`" },
      { "term": "`str(123)`", "match": "`'123'`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements will correctly convert a string to a number? (Select all that apply)",
    "options": [
      "`int(\"45\")`",
      "`float(\"45.67\")`",
      "`str(45)`"
    ],
    "answer": ["`int(\"45\")`", "`float(\"45.67\")`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to convert a string to an integer and then multiply it by 2:",
    "options": [
      "Convert the string to an integer using `int()`",
      "Multiply the integer by 2",
      "Print the result"
    ],
    "correctOrder": [
      "Convert the string to an integer using `int()`",
      "Multiply the integer by 2",
      "Print the result"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nx = \"Hello\"\ny = int(x)\n```",
    "options": [
      "`x` is a string, so it cannot be converted to an integer.",
      "`int()` cannot convert a string to a number.",
      "There is no error."
    ],
    "answer": "`x` is a string, so it cannot be converted to an integer.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to display the following output:\n**Output**: `3.14`\n- `x = \"3.14\"`\n- `y = ___(x)`",
    "answer": "`float`",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Variable naming conventions and dynamic typing",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a valid variable name in Python.\n- `___ = 10`",
    "answer": "age",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid variable name in Python?",
    "options": [
      "`1st_number`",
      "`first_number`",
      "`first-number`"
    ],
    "answer": "`first_number`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, variable names can start with a number.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python variable name.",
    "options": ["`number`", "`first`", "`_`"],
    "answer": ["`first`", "`_`", "`number`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nx = 5\nx = \"Hello\"\nprint(x)\n```",
    "options": [
      "`5`",
      "`\"Hello\"`",
      "`x`"
    ],
    "answer": "`\"Hello\"`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the variable name with its valid use:",
    "options": [
      { "term": "`_age`", "match": "Valid" },
      { "term": "`age_1`", "match": "Valid" },
      { "term": "`1age`", "match": "Invalid" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid variable names in Python? (Select all that apply)",
    "options": [
      "`age_2`",
      "`2age`",
      "`_is_active`"
    ],
    "answer": ["`age_2`", "`_is_active`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define a valid variable in Python:",
    "options": [
      "Choose a name that follows the rules (e.g., not starting with a number)",
      "Assign a value to the variable",
      "Use the variable in your program"
    ],
    "correctOrder": [
      "Choose a name that follows the rules (e.g., not starting with a number)",
      "Assign a value to the variable",
      "Use the variable in your program"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\n2variable = \"test\"\n```",
    "options": [
      "Variables cannot start with a number",
      "The name `2variable` is too long",
      "There is no error"
    ],
    "answer": "Variables cannot start with a number",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a valid variable assignment:\n**Output**: `\"Hello\"`\n- `___ = \"Hello\"`",
    "answer": "greeting",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "3. Operators and Expressions",
        "subtopics": [
          {
            "subtopic": "Arithmetic operators: +, -, *, /, //, %, *",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to calculate the sum of `a` and `b` in Python.\n- `a = 5`\n- `b = 3`\n- `result = a ___ b`",
    "answer": "+",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What does the `//` operator do in Python?",
    "options": [
      "Divides and returns a floating-point number",
      "Divides and returns an integer (floor division)",
      "Returns the remainder of division"
    ],
    "answer": "Divides and returns an integer (floor division)",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `%` operator in Python returns the remainder of a division.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid expression for modulus in Python:",
    "options": ["`10`", "`%`", "`3`"],
    "answer": ["`10`", "`%`", "`3`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\na = 10\nb = 4\nresult = a // b\nprint(result)\n```",
    "options": [
      "`2`",
      "`2.5`",
      "`4`"
    ],
    "answer": "`2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the arithmetic operator with its operation:",
    "options": [
      { "term": "`+`", "match": "Addition" },
      { "term": "`*`", "match": "Multiplication" },
      { "term": "`%`", "match": "Modulus (remainder)" },
      { "term": "`//`", "match": "Division and return integer part" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid arithmetic operators in Python? (Select all that apply)",
    "options": [
      "`+`",
      "`==`",
      "`*`"
    ],
    "answer": ["`+`", "`*`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following operators in order of precedence (highest to lowest):",
    "options": [
      "`*`",
      "`+`",
      "`/`",
      "`-`"
    ],
    "correctOrder": [
      "`*`",
      "`/`",
      "`+`",
      "`-`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\na = 5\nb = 0\nresult = a / b\n```",
    "options": [
      "The division by zero will result in an error",
      "The variable `b` cannot be used as the divisor",
      "The `/` operator should be replaced with `//`"
    ],
    "answer": "The division by zero will result in an error",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to calculate the remainder of division between `a` and `b`:\n**Output**: `1`\n- `a = 10`\n- `b = 3`\n- `result = a ___ b`",
    "answer": "%",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Comparison operators: ==, !=, >, <, >=, <=",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to compare if `a` is greater than `b`.\n- `a = 5`\n- `b = 3`\n- `result = a ___ b`",
    "answer": ">",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What does the `!=` operator check in Python?",
    "options": [
      "Checks if two values are equal",
      "Checks if two values are not equal",
      "Compares the size of two values"
    ],
    "answer": "Checks if two values are not equal",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `>=` operator checks if one value is greater than or equal to another.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python comparison expression:",
    "options": ["`5`", "`>=`", "`3`"],
    "answer": ["`5`", "`>=`", "`3`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\na = 5\nb = 3\nresult = a > b\nprint(result)\n```",
    "options": [
      "`True`",
      "`False`",
      "`5`"
    ],
    "answer": "`True`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the comparison operator with its purpose:",
    "options": [
      { "term": "`==`", "match": "Equal to" },
      { "term": "`!=`", "match": "Not equal to" },
      { "term": "`>`", "match": "Greater than" },
      { "term": "`<`", "match": "Less than" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid comparison operators in Python? (Select all that apply)",
    "options": [
      "`==`",
      "`=`",
      "`!=`"
    ],
    "answer": ["`==`", "`!=`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the comparison operators in the correct order of precedence:",
    "options": [
      "`>`",
      "`<=`",
      "`==`",
      "`!=`"
    ],
    "correctOrder": [
      "`==`",
      "`!=`",
      "`>`",
      "`<=`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\na = 5\nb = 3\nresult = a = b\n```",
    "options": [
      "The `=` operator should be `==` for comparison",
      "`a = b` is a valid assignment, not a comparison",
      "The `=` operator is used incorrectly"
    ],
    "answer": "The `=` operator should be `==` for comparison",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to compare if `a` is equal to `b`:\n**Output**: `True`\n- `a = 5`\n- `b = 5`\n- `result = a ___ b`",
    "answer": "==",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Logical operators: and, or, not",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to check if both `a` is greater than 5 and `b` is less than 10.\n- `a = 6`\n- `b = 8`\n- `result = a ___ 5 and b ___ 10`",
    "answer": "> <",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\na = True\nb = False\nresult = a and b\nprint(result)\n```",
    "options": [
      "`True`",
      "`False`",
      "`None`"
    ],
    "answer": "`False`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `not` operator in Python negates the truth value of a Boolean expression.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python expression using logical operators:",
    "options": ["`a`", "`True`", "`not`", "`b`", "`==`"],
    "answer": ["`a`", "`==`", "`not`", "`b`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\na = True\nb = False\nresult = a or b\nprint(result)\n```",
    "options": [
      "`True`",
      "`False`",
      "`None`"
    ],
    "answer": "`True`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the logical operator with its function:",
    "options": [
      { "term": "`and`", "match": "Returns True only if both conditions are True" },
      { "term": "`or`", "match": "Returns True if at least one condition is True" },
      { "term": "`not`", "match": "Negates the value" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid logical operators in Python? (Select all that apply)",
    "options": [
      "`and`",
      "`&`",
      "`or`"
    ],
    "answer": ["`and`", "`or`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the logical operators by precedence (highest to lowest):",
    "options": [
      "`not`",
      "`and`",
      "`or`"
    ],
    "correctOrder": [
      "`not`",
      "`and`",
      "`or`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\na = True\nb = False\nif a or not b:\n    print(\"True\")\n```",
    "options": [
      "The code is correct.",
      "The `not` operator is used incorrectly.",
      "The `or` operator is invalid."
    ],
    "answer": "The code is correct.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print `True` if `a` is True or `b` is False.\n- `a = True`\n- `b = False`\n- `result = a ___ b`",
    "answer": "or",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Assignment operators: =, +=",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to increment the value of `x` by 5.\n- `x = 10`\n- `x ___ 5`",
    "answer": "+=",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What does the `+=` operator do in Python?",
    "options": [
      "Assigns the value on the right to the variable on the left",
      "Adds the value on the right to the variable on the left and assigns the result",
      "Subtracts the value on the right from the variable on the left"
    ],
    "answer": "Adds the value on the right to the variable on the left and assigns the result",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `=` operator in Python is used for assignment, not comparison.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid assignment expression:",
    "options": ["`+=`", "`5`", "`x`", "`=`"],
    "answer": ["`x`", "`+=`", "`5`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nx = 5\nx += 3\nprint(x)\n```",
    "options": [
      "`3`",
      "`5`",
      "`8`"
    ],
    "answer": "`8`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the assignment operator with its action:",
    "options": [
      { "term": "`=`", "match": "Assigns the right value to the variable" },
      { "term": "`+=`", "match": "Adds the value to the variable" },
      { "term": "`-=`", "match": "Subtracts the value from the variable" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid assignment operators in Python? (Select all that apply)",
    "options": [
      "`=`",
      "`==`",
      "`+=`"
    ],
    "answer": ["`=`", "`+=`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the assignment operators by precedence (highest to lowest):",
    "options": [
      "`=`",
      "`+=`",
      "`-=`"
    ],
    "correctOrder": [
      "`=`",
      "`+=`",
      "`-=`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nx = 5\nx + = 2\n```",
    "options": [
      "There should be no space between `+` and `=`",
      "The `+` operator is used incorrectly.",
      "The code is correct."
    ],
    "answer": "There should be no space between `+` and `=`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to assign the sum of `a` and `b` to `result`:\n- `a = 3`\n- `b = 4`\n- `result ___ a + b`",
    "answer": "=",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Bitwise operators (optional for beginners)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to perform a bitwise AND operation on `a` and `b`.\n- `a = 5`\n- `b = 3`\n- `result = a ___ b`",
    "answer": "&",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What does the `<<` operator do in Python?",
    "options": [
      "Performs a bitwise left shift",
      "Performs a bitwise right shift",
      "Performs a bitwise AND"
    ],
    "answer": "Performs a bitwise left shift",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `|` operator in Python performs a bitwise OR operation.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python expression using bitwise operators:",
    "options": ["`<<`", "`a`", "`2`"],
    "answer": ["`a`", "`<<`", "`2`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\na = 4\nb = 2\nresult = a & b\nprint(result)\n```",
    "options": [
      "`2`",
      "`0`",
      "`1`"
    ],
    "answer": "`0`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the bitwise operator with its function:",
    "options": [
      { "term": "`&`", "match": "Performs bitwise AND" },
      { "term": "`|`", "match": "Performs bitwise OR" },
      { "term": "`<<`", "match": "Left shift bits" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid bitwise operators in Python? (Select all that apply)",
    "options": [
      "`&`",
      "`|`",
      "`<<`"
    ],
    "answer": ["`&`", "`|`", "`<<`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following bitwise operators by precedence (highest to lowest):",
    "options": [
      "`&`",
      "`<<`",
      "`|`"
    ],
    "correctOrder": [
      "`<<`",
      "`&`",
      "`|`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\na = 4\nb = 2\nresult = a < < b\n```",
    "options": [
      "The operator `<<` should not have a space.",
      "The `<<` operator is incorrect.",
      "The code is correct."
    ],
    "answer": "The operator `<<` should not have a space.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to perform a bitwise OR operation on `a` and `b`:\n- `a = 5`\n- `b = 3`\n- `result = a ___ b`",
    "answer": "|",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "4. Control Flow: Conditionals and Loops",
        "subtopics": [
          {
            "subtopic": "Conditionals: if, elif, else",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to check if `a` is greater than `b` and print \"a is greater\" if the condition is true.\n```python\na = 10\nb = 5\nif a ___ b:\n    print(\"a is greater\")\n```",
    "answer": ">",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nx = 5\nif x > 3:\n    print(\"Greater than 3\")\nelse:\n    print(\"Less than or equal to 3\")\n```",
    "options": [
      "`Greater than 3`",
      "`Less than or equal to 3`",
      "No output"
    ],
    "answer": "`Greater than 3`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `elif` statement is used to check for multiple conditions if the previous `if` or `elif` conditions were false.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python `if` statement that checks if `x` is less than `10`.",
    "options": ["`if`", "`x`", "`<`", "`10`", "`:`"],
    "answer": ["`if`", "`x`", "`<`", "`10`", "`:`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nage = 20\nif age < 18:\n    print(\"Minor\")\nelse:\n    print(\"Adult\")\n```",
    "options": [
      "`Minor`",
      "`Adult`",
      "No output"
    ],
    "answer": "`Adult`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`if 5 > 3: print(\"True\")`", "match": "`True`" },
      { "term": "`if 3 > 5: print(\"True\")`", "match": "No output" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid conditionals in Python? (Select all that apply)",
    "options": [
      "`if`",
      "`check`",
      "`elif`"
    ],
    "answer": ["`if`", "`elif`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following conditionals in the correct order of execution:",
    "options": [
      "`if`",
      "`elif`",
      "`else`"
    ],
    "correctOrder": [
      "`if`",
      "`elif`",
      "`else`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nx = 10\nif x > 5\n    print(\"Greater\")\n```",
    "options": [
      "Missing colon after the `if` statement",
      "Incorrect variable name",
      "The `print` statement is incorrect"
    ],
    "answer": "Missing colon after the `if` statement",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print \"Yes\" if `x` is equal to `5`:\n```python\nx = 5\nif x ___ 5:\n    print(\"Yes\")\n```",
    "answer": "==",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "for loops (with range and iterables)",
            "questionsData":[
  {
    "type": "fill",
    "question": "Fill in the blank to print numbers from 0 to 4 using a `while` loop.\n```python\ni = 0\nwhile i ___ 5:\n    print(i)\n    i += 1\n```",
    "answer": "<",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```",
    "options": [
      "`0 1 2`",
      "`1 2 3`",
      "`0 1 2 3`"
    ],
    "answer": "`0 1 2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A `while` loop will continue to execute as long as the condition is true.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid `while` loop that prints numbers from 0 to 2.",
    "options": ["`while`", "`0`", "`i`", "`<`", "`3`", "`print`"],
    "answer": ["`while`", "`i`", "`<`", "`3`", "`:`", "`print`", "`(`", "`i`", "`)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nx = 1\nwhile x < 4:\n    print(x)\n    x += 1\n```",
    "options": [
      "`1 2 3`",
      "`1 2 3 4`",
      "`2 3 4`"
    ],
    "answer": "`1 2 3`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the `while` loop code with its output:",
    "options": [
      { "term": "`while x < 2: print(x); x += 1`", "match": "`0 1`" },
      { "term": "`while x < 3: print(x); x += 1`", "match": "`0 1 2`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid `while` loops in Python? (Select all that apply)",
    "options": [
      "`while x < 5:`",
      "`while x > 3:`",
      "`while x = 0:`"
    ],
    "answer": ["`while x < 5:`", "`while x > 3:`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the parts of a `while` loop in the correct order:",
    "options": [
      "`while`",
      "`condition`",
      "`block of code`"
    ],
    "correctOrder": [
      "`while`",
      "`condition`",
      "`block of code`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nx = 0\nwhile x < 3:\n    print(x)\n    x++\n```",
    "options": [
      "The increment operator should be `x += 1`",
      "`while` loop is incorrect",
      "The `print` statement is wrong"
    ],
    "answer": "The increment operator should be `x += 1`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print \"Finished!\" after the loop:\n```python\nwhile x < 3:\n    print(x)\n    x += 1\n___ print(\"Finished!\")\n```",
    "answer": "else:",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Loop control statements: break, continue, pass",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to stop the loop when `x` is equal to `3`.\n```python\nfor x in range(5):\n    if x == 3:\n        ___\n    print(x)\n```",
    "answer": "break",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nfor x in range(3):\n    if x == 1:\n        continue\n    print(x)\n```",
    "options": [
      "`0 1 2`",
      "`0 2`",
      "`1 2`"
    ],
    "answer": "`0 2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `continue` statement skips the current iteration and moves to the next iteration in the loop.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid `while` loop with a `break` statement that stops when `x` is greater than `3`.",
    "options": ["`while`", "`break`", "`x`", "`>`", "`3`"],
    "answer": ["`while`", "`x`", "`>`", "`3`", "`:`", "`break`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nfor x in range(5):\n    if x == 4:\n        pass\n    print(x)\n```",
    "options": [
      "`0 1 2 3 4`",
      "`0 1 2 3`",
      "`0 1 2 3 pass`"
    ],
    "answer": "`0 1 2 3 4`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the loop control code with its output:",
    "options": [
      { "term": "`for x in range(3): if x == 1: continue; print(x)`", "match": "`0 2`" },
      { "term": "`for x in range(3): if x == 2: break; print(x)`", "match": "`0 1`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are loop control statements in Python? (Select all that apply)",
    "options": [
      "`continue`",
      "`break`",
      "`stop`"
    ],
    "answer": ["`continue`", "`break`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the loop control statements in the correct order:",
    "options": [
      "`break`",
      "`continue`",
      "`pass`"
    ],
    "correctOrder": [
      "`break`",
      "`continue`",
      "`pass`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nfor x in range(5):\n    if x == 3:\n        pass\n        break\n    print(x)\n```",
    "options": [
      "The `break` statement is unnecessary",
      "The `continue` statement should be used",
      "The `pass` statement should be removed"
    ],
    "answer": "The `break` statement is unnecessary",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to skip printing `2`:\n```python\nfor x in range(5):\n    if x == 2:\n        ___\n    print(x)\n```",
    "answer": "continue",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Nested loops and conditionals",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a nested loop that prints pairs of numbers.\n```python\nfor i in range(3):\n    for j in range(2):\n        print(i, j)\n```",
    "answer": "for j in range(2):",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nfor i in range(2):\n    for j in range(3):\n        print(i, j)\n```",
    "options": [
      "`0 0 0 1 1 2`",
      "`0 0 1 1 2`",
      "`0 1 2 0 1 2`"
    ],
    "answer": "`0 0 1 1 2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A nested loop refers to a loop inside another loop.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a nested loop that prints `i` and `j`.",
    "options": ["`for`", "`in`", "`range(3)`", "`for`", "`range(2)`", "`i`", "`j`", "`print`"],
    "answer": ["`for`", "`i`", "`in`", "`range(3)`", "`:`", "`for`", "`j`", "`in`", "`range(2)`", "`:`", "`print`", "`(`", "`i`", "`,`", "`j`", "`)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nfor i in range(2):\n    for j in range(2):\n        print(i, j)\n```",
    "options": [
      "`0 0 0 1 1 0`",
      "`0 1 0 0 1 1`",
      "`0 0 0 1 1 1`"
    ],
    "answer": "`0 0 0 1 1 0`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the nested loop code with its output:",
    "options": [
      { "term": "`for i in range(2): for j in range(3): print(i, j)`", "match": "`0 0 0 1 1 2`" },
      { "term": "`for i in range(3): for j in range(2): print(i, j)`", "match": "`0 0 1 1 2`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid nested loops in Python? (Select all that apply)",
    "options": [
      "`for i in range(3): for j in range(3):`",
      "`for i in range(3): for i in range(2):`",
      "`for i in range(3): while j < 2:`"
    ],
    "answer": ["`for i in range(3): for j in range(3):`", "`for i in range(3): while j < 2:`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the parts of a nested loop in the correct order:",
    "options": [
      "`for`",
      "`for`",
      "`print`"
    ],
    "correctOrder": [
      "`for`",
      "`for`",
      "`print`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nfor i in range(2):\n    for i in range(2):\n        print(i)\n```",
    "options": [
      "Variable name `i` is used twice in the inner and outer loops.",
      "The loop condition is incorrect.",
      "The `print` statement is invalid."
    ],
    "answer": "Variable name `i` is used twice in the inner and outer loops.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print each combination of `i` and `j`:\n```python\nfor i in range(2):\n    ___ j in range(2):\n        print(i, j)\n```",
    "answer": "for",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "5. Functions and Modular Code",
        "subtopics": [
          {
            "subtopic": "Defining functions using def",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a function `greet()` that prints \"Hello, World!\".\n- `def ___():`",
    "answer": "greet",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct syntax to define a function named `add()` that takes two parameters?",
    "options": [
      "`add{a, b}`",
      "`def add(a, b):`",
      "`function add(a, b):`"
    ],
    "answer": "`def add(a, b):`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, a function must be defined using the `def` keyword.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to define a Python function that prints `Hello!`.",
    "options": ["`function`", "`def`", "`print(\"Hello!\")`", "`greet`"],
    "answer": ["`def`", "`greet`", "`():`", "`print(\"Hello!\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code do?\n```python\ndef greet():\n    print(\"Hello!\")\ngreet()\n```",
    "options": [
      "Prints nothing",
      "Prints \"greet\"",
      "Prints \"Hello!\""
    ],
    "answer": "Prints \"Hello!\"",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the function definition with its output:",
    "options": [
      { "term": "`def greet(): print(\"Hello!\")`", "match": "`Hello!`" },
      { "term": "`def greet(): print(\"Hi!\")`", "match": "`Hi!`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following correctly defines a function in Python? (Select all that apply)",
    "options": [
      "`def function_name():`",
      "`function def name():`",
      "`function name():`"
    ],
    "answer": ["`def function_name():`"],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define and call a function in Python:",
    "options": [
      "Define the function",
      "Call the function"
    ],
    "correctOrder": [
      "Define the function",
      "Call the function"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python function?\n```python\ndef greet:\n    print(\"Hello!\")\n```",
    "options": [
      "The function needs parentheses `()`",
      "The function name is incorrect",
      "`print` is not used properly"
    ],
    "answer": "The function needs parentheses `()`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a function that prints `Good Morning!`.\n- `def ___():`",
    "answer": "good_morning",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Function parameters and return values",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a function `add_numbers()` that takes two parameters `a` and `b` and returns their sum.\n- `def add_numbers(a, b):`\n- `return ___`",
    "answer": "a + b",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following functions will return the sum of two numbers?",
    "options": [
      "```python\n\ndef add(a, b):\n    return a * b\n```",
      "```python\n\ndef add(a, b):\n    return a + b\n```",
      "```python\n\ndef add(a, b):\n    print(a + b)\n```"
    ],
    "answer": "```python\n\ndef add(a, b):\n    return a + b\n```",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A function in Python can return a value using the `return` keyword.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the code to define a function `multiply()` that returns the product of `a` and `b`.",
    "options": ["`return`", "`a`", "`def`", "`multiply(b, a)`", "`*`"],
    "answer": ["`def`", "`multiply`", "`(`", "`a`", "`,`", "`b`", "`)`", "`:`", "`return`", "`a`", "`*`", "`b`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\ndef greet(name):\n    return \"Hello, \" + name\nprint(greet(\"Alice\"))\n```",
    "options": [
      "`Hello`",
      "`Hello, Alice`",
      "`Alice`"
    ],
    "answer": "`Hello, Alice`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the function with its output:",
    "options": [
      { "term": "`def multiply(a, b): return a * b`", "match": "Returns the product of `a` and `b`" },
      { "term": "`def add(a, b): return a + b`", "match": "Returns the sum of `a` and `b`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following functions correctly return values? (Select all that apply)",
    "options": [
      "```python\n\ndef subtract(a, b):\n    return a - b\n```",
      "```python\n\ndef multiply(a, b):\n    print(a * b)\n```",
      "```python\n\ndef divide(a, b):\n    return a / b\n```"
    ],
    "answer": [
      "```python\n\ndef subtract(a, b):\n    return a - b\n```",
      "```python\n\ndef divide(a, b):\n    return a / b\n```"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define and call a function that returns a value:",
    "options": [
      "Define the function with parameters",
      "Use `return` to return the result",
      "Call the function with arguments"
    ],
    "correctOrder": [
      "Define the function with parameters",
      "Use `return` to return the result",
      "Call the function with arguments"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python function?\n```python\ndef greet(name)\n    return \"Hello, \" + name\n```",
    "options": [
      "The function is missing parentheses",
      "The return statement is misplaced",
      "The function definition is missing a colon"
    ],
    "answer": "The function definition is missing a colon",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a function that returns the product of `a` and `b`.\n- `def multiply(a, b):`\n- `return ___`",
    "answer": "a * b",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Function scope: local vs global variables",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to print a global variable `name` inside a function.\n- `name = \"Alice\"`\n- `def greet():`\n- `___(name)`",
    "answer": "print(name)",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following will result in an error due to the variable being local?",
    "options": [
      "```python\n\ndef greet():\n    name = \"Alice\"\n    print(name)\n```",
      "```python\n\nname = \"Alice\"\ndef greet():\n    print(name)\n```"
    ],
    "answer": "Neither option results in an error. Both are valid.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, a variable defined inside a function is local to that function and cannot be accessed outside.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the code to define a global variable `name` and print it inside a function.",
    "options": ["`name = \"Alice\"`", "`def greet()`", "`print(name)`"],
    "answer": ["`name = \"Alice\"`", "`def greet():`", "`print(name)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nname = \"Alice\"\ndef greet():\n    print(name)\ngreet()\n```",
    "options": [
      "`None`",
      "`Alice`",
      "`greet`"
    ],
    "answer": "`Alice`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with the correct variable scope type:",
    "options": [
      { "term": "`name = \"Alice\"`", "match": "Global variable" },
      { "term": "```python\n\ndef greet():\n    name = \"Bob\"\n```", "match": "Local variable" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following examples correctly uses a global variable? (Select all that apply)",
    "options": [
      "```python\n\nname = \"Alice\"\ndef greet():\n    print(name)\n```",
      "```python\n\ndef greet():\n    name = \"Alice\"\n    print(name)\n```",
      "```python\n\nname = \"Alice\"\ndef greet():\n    name = \"Bob\"\n    print(name)\n```"
    ],
    "answer": [
      "```python\n\nname = \"Alice\"\ndef greet():\n    print(name)\n```",
      "```python\n\nname = \"Alice\"\ndef greet():\n    name = \"Bob\"\n    print(name)\n```"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to use a global variable inside a function:",
    "options": [
      "Define a global variable",
      "Define a function that accesses the global variable",
      "Call the function"
    ],
    "correctOrder": [
      "Define a global variable",
      "Define a function that accesses the global variable",
      "Call the function"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\ndef greet():\n    print(name)\nname = \"Alice\"\ngreet()\n```",
    "options": [
      "The global variable is not defined correctly.",
      "The function is missing a parameter.",
      "The function is trying to print a global variable which is fine."
    ],
    "answer": "The function is trying to print a global variable which is fine.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a function that prints the global variable `name`.\n- `name = \"Alice\"`\n- `def greet():`\n- `___(name)`",
    "answer": "print(name)",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Default parameters and keyword arguments",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a function `greet()` with a default parameter `name` set to `\"John\"`.\n- `def greet(name=\"___\"):`",
    "answer": "\"John\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following defines a function with a keyword argument?",
    "options": [
      "```python\n\ndef greet(name=\"Alice\"):\n```",
      "```python\n\ndef greet(name=\"Alice\", age=30):\n```",
      "```python\n\ngreet(name=\"Alice\")\n```"
    ],
    "answer": "```python\n\ndef greet(name=\"Alice\", age=30):\n```",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "You can pass arguments to a function in Python using keyword arguments where you specify the parameter name.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the code to define a function with a default parameter `age`:",
    "options": ["`def greet(age=30):`", "`print(age)`"],
    "answer": ["`def greet(age=30):`", "`print(age)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\ndef greet(name=\"John\", age=25):\n    print(name, age)\ngreet(age=30)\n```",
    "options": [
      "`John 25`",
      "`John 30`",
      "`John`"
    ],
    "answer": "`John 30`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the function with its output:",
    "options": [
      { "term": "`def greet(name=\"Alice\"): print(name)`", "match": "`Alice`" },
      { "term": "`def greet(name=\"Alice\", age=30): print(name, age)`", "match": "`Alice 30`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are correct uses of default parameters? (Select all that apply)",
    "options": [
      "```python\n\ndef greet(name=\"Alice\", age=30):\n    print(name, age)\n```",
      "```python\n\ndef greet(name=\"Alice\"):\n    print(name)\n```",
      "```python\n\ndef greet(name=\"Alice\", age):\n    print(name, age)\n```"
    ],
    "answer": [
      "```python\n\ndef greet(name=\"Alice\", age=30):\n    print(name, age)\n```",
      "```python\n\ndef greet(name=\"Alice\"):\n    print(name)\n```"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define and call a function with default parameters:",
    "options": [
      "Define the function with default parameters",
      "Call the function with arguments or leave the default"
    ],
    "correctOrder": [
      "Define the function with default parameters",
      "Call the function with arguments or leave the default"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python function?\n```python\ndef greet(name=\"Alice\", age):\n    print(name, age)\n```",
    "options": [
      "The `age` parameter does not have a default value",
      "The function is missing parentheses",
      "The function definition is incorrect"
    ],
    "answer": "The `age` parameter does not have a default value",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a function `greet()` with a default parameter `name=\"Alice\"`.\n- `def greet(name=\"___\"):`",
    "answer": "\"Alice\"",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Lambda functions (anonymous functions)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a lambda function `add()` that returns the sum of `a` and `b`.\n- `add = ___ a, b: a + b`",
    "answer": "lambda",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct way to define a lambda function that multiplies `x` by 2?",
    "options": [
      "`multiply = lambda x: x * 2`",
      "`multiply = (lambda x: x * 2)`",
      "`multiply = lambda(x): x * 2`"
    ],
    "answer": "`multiply = lambda x: x * 2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A lambda function can be defined in a single line using the `lambda` keyword.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the code to define a lambda function that adds 10 to `x`.",
    "options": ["`lambda`", "`x`", "`10`", "`+`", "`def`"],
    "answer": ["`lambda`", "`x`", "`:`", "`x`", "`+`", "`10`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nadd = lambda x, y: x + y\nprint(add(3, 4))\n```",
    "options": [
      "`7`",
      "`3`",
      "`4`"
    ],
    "answer": "`7`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the lambda function with its output:",
    "options": [
      { "term": "`add = lambda x, y: x + y`", "match": "`5`" },
      { "term": "`multiply = lambda x: x * 2`", "match": "`6`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are correct examples of lambda functions? (Select all that apply)",
    "options": [
      "`add = lambda x, y: x + y`",
      "`multiply = lambda x: x * 2`",
      "`add = lambda: 5 + 5`"
    ],
    "answer": [
      "`add = lambda x, y: x + y`",
      "`multiply = lambda x: x * 2`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define and use a lambda function:",
    "options": [
      "Define the lambda function",
      "Call the lambda function"
    ],
    "correctOrder": [
      "Define the lambda function",
      "Call the lambda function"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nadd = lambda x, y: x + y\nprint(add(3))\n```",
    "options": [
      "The lambda function is defined incorrectly.",
      "The function call is missing one argument.",
      "The function doesn't return a value."
    ],
    "answer": "The function call is missing one argument.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a lambda function `multiply()` that returns the product of `x` and `y`.\n- `multiply = ___ x, y: x * y`",
    "answer": "lambda",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Understanding recursion (optional for beginners)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a recursive function that returns the factorial of `n`.\n```python\ndef factorial(n):\n    if n == 0:\n        return ___\n    else:\n        return n * factorial(n - 1)\n```",
    "answer": "1",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the base case in a recursive function?",
    "options": [
      "The part of the function where recursion happens",
      "The condition that stops the recursion",
      "The part where the function is called recursively"
    ],
    "answer": "The condition that stops the recursion",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A recursive function must have a base case to prevent infinite recursion.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the code to define a recursive function `countdown()` that prints numbers from `n` down to `0`.",
    "options": ["`n - 1`", "`def countdown(n):`", "`if n == 0:`", "`print(n)`"],
    "answer": [
      "`def countdown(n):`",
      "`if n == 0:`",
      "`print(n)`",
      "`else:`",
      "`print(n)`",
      "`countdown(n - 1)`"
    ],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\ndef countdown(n):\n    if n == 0:\n        print(n)\n    else:\n        print(n)\n        countdown(n - 1)\ncountdown(3)\n```",
    "options": [
      "`3 2 1 0`",
      "`0 1 2 3`",
      "`3 2 1`"
    ],
    "answer": "`3 2 1 0`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the recursive function with its output:",
    "options": [
      { "term": "`def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1)`", "match": "Factorial of `5` is `120`" },
      { "term": "`def countdown(n): if n == 0: print(n) else: print(n) countdown(n - 1)`", "match": "Countdown from `3` prints `3 2 1 0`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid examples of recursion? (Select all that apply)",
    "options": [
      "```python\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```",
      "```python\n\ndef fibonacci(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n```",
      "```python\n\ndef countdown(n):\n    if n == 0:\n        print(n)\n    else:\n        print(n)\n        countdown(n + 1)\n```"
    ],
    "answer": [
      "```python\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```",
      "```python\n\ndef fibonacci(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n```"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to understand recursion:",
    "options": [
      "Define the base case to stop recursion",
      "Define the recursive step where the function calls itself",
      "Test the function with different inputs"
    ],
    "correctOrder": [
      "Define the base case to stop recursion",
      "Define the recursive step where the function calls itself",
      "Test the function with different inputs"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python function?\n```python\ndef factorial(n):\n    return n * factorial(n - 1)\n```",
    "options": [
      "The base case is missing, leading to infinite recursion.",
      "The function does not return a value.",
      "The function is defined incorrectly."
    ],
    "answer": "The base case is missing, leading to infinite recursion.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a recursive function that calculates the factorial of `n`.\n```python\ndef factorial(n):\n    if n == 0:\n        return ___\n    else:\n        return n * factorial(n - 1)\n```",
    "answer": "1",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "6. Basic Input and Output",
        "subtopics": [
          {
            "subtopic": "User input using input()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to ask for user input and store it in a variable.\n- `user_input = ___(\"Enter your name: \")`",
    "answer": "input",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following will correctly prompt the user for input in Python?",
    "options": [
      "`input(\"Enter your age\")`",
      "`ask(\"Enter your age\")`",
      "`read_input(\"Enter your age\")`"
    ],
    "answer": "`input(\"Enter your age\")`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `input()` function always returns the input as a string.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that takes user input.",
    "options": ["`input`", "`(\"Enter your name:\")`", "`=`"],
    "answer": ["`user_input`", "`=`", "`input`", "`(\"Enter your name: \")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output if the user enters \"John\"?\n```python\nname = input(\"What is your name? \")\nprint(\"Hello, \" + name)\n```",
    "options": [
      "`Hello, John`",
      "`What is your name? John`",
      "`Hello,`"
    ],
    "answer": "`Hello, John`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`name = input(\"Enter your name: \")`", "match": "Prompt the user to enter their name" },
      { "term": "`age = input(\"Enter your age: \")`", "match": "Prompt the user to enter their age" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to take input from a user in Python? (Select all that apply)",
    "options": [
      "`input(\"Enter a number: \")`",
      "`input()`",
      "`scan_input()`"
    ],
    "answer": [
      "`input(\"Enter a number: \")`",
      "`input()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to take user input:",
    "options": [
      "Prompt the user for input using `input()`",
      "Store the input in a variable",
      "Print the user input"
    ],
    "correctOrder": [
      "Prompt the user for input using `input()`",
      "Store the input in a variable",
      "Print the user input"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nname = input(Enter your name)\n```",
    "options": [
      "Missing quotes around the prompt",
      "`input` is misspelled",
      "Missing parentheses"
    ],
    "answer": "Missing quotes around the prompt",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to display the user's input.\n**Output**: `You entered: <user input>`\n- `print(\"You entered: ___\")`",
    "answer": "input()",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Output formatting using print()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to print the message \"Hello, World!\" with a new line after the message.\n- `print(\"Hello, World!\" ___)`",
    "answer": "\\n",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following will print `Hello` and `World!` on separate lines?",
    "options": [
      "`print(\"Hello\") print(\"World!\")`",
      "`print(\"Hello\\nWorld!\")`",
      "`print(\"Hello World!\")`"
    ],
    "answer": "`print(\"Hello\\nWorld!\")`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `print()` function in Python automatically adds a newline character after each print statement.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that prints `Hello` on one line and `World!` on the next line.",
    "options": ["`(\"Hello\",)`", "`print`", "`World!`"],
    "answer": ["`print(\"Hello\")`", "`print(\"World!\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nprint(\"First line\")\nprint(\"Second line\")\n```",
    "options": [
      "`First line Second line`",
      "`First line`",
      "`First line` and `Second line` each on a new line"
    ],
    "answer": "`First line` and `Second line` each on a new line",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`print(\"Hello\")`", "match": "`Hello`" },
      { "term": "`print(\"World!\")`", "match": "`World!`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following will print `Hello` and `World!` on the same line? (Select all that apply)",
    "options": [
      "`print(\"Hello\", end=\"\") print(\"World!\")`",
      "`print(\"Hello World!\")`",
      "`print(\"Hello\\nWorld!\")`"
    ],
    "answer": [
      "`print(\"Hello\", end=\"\") print(\"World!\")`",
      "`print(\"Hello World!\")`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to print multiple items on the same line:",
    "options": [
      "Use `end=\"\"` to prevent a newline after the print statement",
      "Use `print()` to print each item",
      "Call `print()` multiple times for each item"
    ],
    "correctOrder": [
      "Use `end=\"\"` to prevent a newline after the print statement",
      "Use `print()` to print each item",
      "Call `print()` multiple times for each item"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nprint(\"Hello\")\nprint\"World!\"\n```",
    "options": [
      "Missing parentheses for `print`",
      "The word `print` is misspelled",
      "No issues, the code is correct"
    ],
    "answer": "Missing parentheses for `print`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print the following output:\n**Output**: `Python is great!`\n- `print(___)`",
    "answer": "\"Python is great!\"",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "String interpolation (f-strings, % formatting, .format())",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to correctly use an f-string for interpolation:\n- `name = \"Alice\"`\n- `print(f\"Hello, ___!\")`",
    "answer": "name",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following will correctly insert the value of the variable `name` into the string using an f-string?",
    "options": [
      "`f\"Hello {name}\"`",
      "`\"Hello {name}\"`",
      "`\"Hello \" + name`"
    ],
    "answer": "`f\"Hello {name}\"`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, f-strings are a more efficient and readable way of performing string interpolation compared to `%` formatting.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that uses `.format()` for string interpolation.",
    "options": ["`\"Hello {name}\"`", "`.format()`", "`print`"],
    "answer": ["`print(\"Hello {}\".format(name))`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output if `name = \"John\"`?\n```python\nname = \"John\"\nprint(f\"Hello, {name}!\")\n```",
    "options": [
      "`Hello John!`",
      "`Hello, name!`",
      "`Hello!`"
    ],
    "answer": "`Hello John!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`print(\"Hello {}\".format(\"Alice\"))`", "match": "`Hello Alice`" },
      { "term": "`print(f\"Hello {name}\")` where `name = \"Bob\"`", "match": "`Hello Bob`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods can be used for string interpolation in Python? (Select all that apply)",
    "options": [
      "f-strings",
      "`%` formatting",
      "`.format()` method"
    ],
    "answer": [
      "f-strings",
      "`%` formatting",
      "`.format()` method"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to perform string interpolation using `.format()`:",
    "options": [
      "Call the `.format()` method on the string",
      "Place placeholders `{}` in the string where values should be inserted",
      "Pass values to `.format()`"
    ],
    "correctOrder": [
      "Place placeholders `{}` in the string where values should be inserted",
      "Call the `.format()` method on the string",
      "Pass values to `.format()`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nname = \"Alice\"\nprint(\"Hello, {name}\")\n```",
    "options": [
      "It should use f-strings to interpolate `name`",
      "`.format()` should be used for interpolation",
      "No issues, the code is correct"
    ],
    "answer": "It should use f-strings to interpolate `name`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to display the following output using f-string interpolation:\n**Output**: `Age: 25`\n- `age = 25`\n- `print(f\"Age: ___\")`",
    "answer": "age",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      }
    ]
  },
  {
    "phase": "Phase 2: Data Structures and Collections",
    "topics": [
      {
        "topic": "7. Lists",
        "subtopics": [
          {
            "subtopic": "Creating and modifying lists",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a list of integers from 1 to 5 in Python.\n- `my_list = ___`",
    "answer": "[1, 2, 3, 4, 5]",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following methods will add the number `6` to the list `my_list = [1, 2, 3, 4, 5]`?",
    "options": [
      "`my_list.add(6)`",
      "`my_list.append(6)`",
      "`my_list.insert(6)`"
    ],
    "answer": "`my_list.append(6)`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `append()` method adds a new element to the end of a list in Python.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python statement that adds `7` to a list `my_list`.",
    "options": ["`7`", "`append`", "`my_list`"],
    "answer": ["`my_list`", "`.append(`", "`7`", "`)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will be the output of the following Python code?\n```python\nmy_list = [1, 2, 3, 4, 5]\nmy_list[2] = 6\nprint(my_list)\n```",
    "options": [
      "`[1, 2, 6, 4, 5]`",
      "`[1, 2, 3, 4, 5]`",
      "`[1, 2, 3, 4, 6]`"
    ],
    "answer": "`[1, 2, 6, 4, 5]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`my_list = [1, 2, 3]`", "match": "`[1, 2, 3]`" },
      { "term": "`my_list.append(4)`", "match": "`[1, 2, 3, 4]`" },
      { "term": "`print(my_list)`", "match": "`[1, 2, 3, 4]`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to modify a list in Python? (Select all that apply)",
    "options": [
      "`my_list.append(6)`",
      "`my_list.add(6)`",
      "`my_list.insert(2, 6)`"
    ],
    "answer": [
      "`my_list.append(6)`",
      "`my_list.insert(2, 6)`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to modify a list by adding an element:",
    "options": [
      "Use `append()` or `insert()` method",
      "Modify the list by adding the new element",
      "Reference the list (e.g., `my_list`)"
    ],
    "correctOrder": [
      "Reference the list (e.g., `my_list`)",
      "Use `append()` or `insert()` method",
      "Modify the list by adding the new element"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nmy_list = [1, 2, 3]\nmy_list[1] = 4\n```",
    "options": [
      "The syntax is incorrect",
      "The index should be enclosed in parentheses",
      "The list is immutable"
    ],
    "answer": "The syntax is correct. The list is mutable, and the code works as expected.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to remove `4` from the list `my_list = [1, 2, 3, 4, 5]`.\n- `my_list.___`",
    "answer": "remove(4)",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "8. Tuples",
        "subtopics": [
          {
            "subtopic": "Creating tuples and understanding immutability",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a tuple with three elements: `1`, `\"apple\"`, and `3.14`.\n```python\nmy_tuple = ___\n```",
    "answer": "(1, \"apple\", 3.14)",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following creates a tuple in Python?",
    "options": [
      "`tuple = (1, 2, 3)`",
      "`tuple = [1, 2, 3]`",
      "`tuple = {1, 2, 3}`"
    ],
    "answer": "`tuple = (1, 2, 3)`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Tuples are immutable in Python, meaning their elements cannot be modified after creation.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that defines a tuple with three elements: `\"a\"`, `\"b\"`, and `\"c\"`.",
    "options": ["`(\"b\", \"a\", \"c\")`", "`tuple`", "`=`"],
    "answer": ["`tuple`", "`=`", "`(\"a\", \"b\", \"c\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_tuple = (5, 10, 15)\nprint(my_tuple[1])\n```",
    "options": [
      "`5`",
      "`10`",
      "`15`"
    ],
    "answer": "`10`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`my_tuple = (10, 20, 30)`", "match": "`(10, 20, 30)`" },
      { "term": "`my_tuple = (10, 20)`", "match": "`(10, 20)`" },
      { "term": "`my_tuple = (10, 20, 30, 40)`", "match": "`(10, 20, 30, 40)`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to create a tuple in Python? (Select all that apply)",
    "options": [
      "`tuple = ()`",
      "`tuple = (\"apple\", \"banana\")`",
      "`tuple = [1, 2, 3]`"
    ],
    "answer": [
      "`tuple = ()`",
      "`tuple = (\"apple\", \"banana\")`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create and access a tuple:",
    "options": [
      "Create the tuple",
      "Access an element by index",
      "Print the element"
    ],
    "correctOrder": [
      "Create the tuple",
      "Access an element by index",
      "Print the element"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nmy_tuple = (1, 2, 3)\nmy_tuple[0] = 4\n```",
    "options": [
      "Tuples are immutable, and elements cannot be modified",
      "The tuple is not defined correctly",
      "The tuple cannot have more than 2 elements"
    ],
    "answer": "Tuples are immutable, and elements cannot be modified",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a tuple with only one element `\"apple\"`.\n```python\nmy_tuple = ___\n```",
    "answer": "(\"apple\",)",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Tuple packing and unpacking",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a tuple with values `1`, `\"apple\"`, and `True`, and unpack it into three separate variables.\n```python\nmy_tuple = (___)\na, b, c = my_tuple\n```",
    "answer": "(1, \"apple\", True)",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nmy_tuple = (1, 2, 3)\na, b, c = my_tuple\nprint(a, b, c)\n```",
    "options": [
      "`1 2 3`",
      "`2 3 1`",
      "`1, 2, 3`"
    ],
    "answer": "`1 2 3`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Tuple unpacking in Python allows you to assign multiple variables at once from a tuple.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that unpacks a tuple into variables `a`, `b`, and `c`.",
    "options": ["`b`", "`a`", "`=`", "`my_tuple`", "`c`"],
    "answer": ["`a`", "`b`", "`c`", "`=`", "`my_tuple`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5)\ncombined = tuple1 + tuple2\nprint(combined)\n```",
    "options": [
      "`(1, 2, 3, 4, 5)`",
      "`(1, 2, 3)`",
      "`(4, 5)`"
    ],
    "answer": "`(1, 2, 3, 4, 5)`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`a, b, c = (1, 2, 3)`", "match": "`1 2 3`" },
      { "term": "`a, b = (1, 2)`", "match": "`1 2`" },
      { "term": "`a, b, c = (10, 20, 30)`", "match": "`10 20 30`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to perform tuple unpacking in Python? (Select all that apply)",
    "options": [
      "`a, b = (1, 2, 3)`",
      "`a, b = (1, 2)`",
      "`a, b, c = (1, 2)`"
    ],
    "answer": [
      "`a, b = (1, 2)`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to unpack a tuple into variables:",
    "options": [
      "Define the tuple",
      "Unpack the tuple into variables",
      "Use the unpacked variables"
    ],
    "correctOrder": [
      "Define the tuple",
      "Unpack the tuple into variables",
      "Use the unpacked variables"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nmy_tuple = (1, 2, 3)\na, b = my_tuple\n```",
    "options": [
      "Too few variables to unpack",
      "Too many variables to unpack",
      "Incorrect tuple syntax"
    ],
    "answer": "Too few variables to unpack",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to unpack a tuple `(10, 20, 30)` into variables `x`, `y`, and `z`.\n```python\nmy_tuple = (10, 20, 30)\n___\n```",
    "answer": "x, y, z = my_tuple",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Using tuples as dictionary keys",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to use a tuple as a key in a dictionary.\n```python\nmy_dict = {(___): \"value\"}\n```",
    "answer": "(\"key1\", \"key2\")",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid way to use a tuple as a dictionary key?",
    "options": [
      "`my_dict = {[1, 2]: \"value\"}`",
      "`my_dict = {(\"apple\", \"banana\"): \"fruit\"}`",
      "`my_dict = {(1, 2, 3): [1, 2, 3]}`"
    ],
    "answer": "`my_dict = {(\"apple\", \"banana\"): \"fruit\"}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A tuple can be used as a dictionary key because tuples are immutable.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that uses a tuple as a key in a dictionary.",
    "options": ["`(\"tuple\", \"key\")`", "`my_dict`", "`=`", "`{\"apple\": \"fruit\"}`"],
    "answer": ["`my_dict`", "`=`", "`{(\"tuple\", \"key\"): \"fruit\"}`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_dict = {(\"name\", \"age\"): \"John\"}\nprint(my_dict[(\"name\", \"age\")])\n```",
    "options": [
      "`name age`",
      "`John`",
      "`(\"name\", \"age\")`"
    ],
    "answer": "`John`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`my_dict = {(\"apple\", \"orange\"): \"fruit\"}`", "match": "`\"fruit\"`" },
      { "term": "`my_dict = {(\"red\", \"blue\"): \"colors\"}`", "match": "`\"colors\"`" },
      { "term": "`my_dict = {(\"dog\", \"cat\"): \"animals\"}`", "match": "`\"animals\"`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid tuple keys for a dictionary? (Select all that apply)",
    "options": [
      "`{(1, 2): \"first\"}`",
      "`{[\"apple\", \"banana\"]: \"fruit\"}`",
      "`{(3, 4): \"second\"}`"
    ],
    "answer": [
      "`{(1, 2): \"first\"}`",
      "`{(3, 4): \"second\"}`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to access a value using a tuple as a dictionary key:",
    "options": [
      "Define the tuple key.",
      "Define the dictionary with the tuple as the key.",
      "Access the value using the tuple key."
    ],
    "correctOrder": [
      "Define the tuple key.",
      "Define the dictionary with the tuple as the key.",
      "Access the value using the tuple key."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nmy_dict = {[1, 2]: \"value\"}\n```",
    "options": [
      "Lists cannot be used as dictionary keys because they are mutable",
      "The tuple should be wrapped with parentheses",
      "Dictionary keys cannot contain numbers"
    ],
    "answer": "Lists cannot be used as dictionary keys because they are mutable",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to use a tuple `(\"name\", \"age\")` as a key in a dictionary.\n```python\nmy_dict = {___: \"John\"}\nprint(my_dict)\n```",
    "answer": "(\"name\", \"age\")",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "9. Dictionaries",
        "subtopics": [
          {
            "subtopic": "Creating dictionaries",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a list of squares from 1 to 5 using list comprehension.\n- `[x**2 for x in ___(1, 6)]`",
    "answer": "range",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the correct syntax for a list comprehension that doubles each number in a list `nums`?",
    "options": [
      "`[x * 2 for x in nums]`",
      "`{x * 2 for x in nums}`",
      "`(x * 2 for x in nums)`"
    ],
    "answer": "`[x * 2 for x in nums]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "List comprehensions can replace traditional `for` loops for creating lists in Python.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to form a list comprehension that creates a list of even numbers from 1 to 10.",
    "options": ["`in`", "`x`", "`[`", "`range(1, 11)`", "`if`", "`x % 2 == 0`", "`for`", "`]`"],
    "answer": ["`[`", "`x`", "`for`", "`x`", "`in`", "`range(1, 11)`", "`if`", "`x % 2 == 0`", "`]`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nnumbers = [1, 2, 3, 4]\nsquares = [x**2 for x in numbers]\nprint(squares)\n```",
    "options": [
      "`[1, 2, 3, 4]`",
      "`[1, 4, 9, 16]`",
      "`[1, 8, 27, 64]`"
    ],
    "answer": "`[1, 4, 9, 16]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the list comprehension with its output:",
    "options": [
      { "term": "`[x*2 for x in [1, 2, 3]]`", "match": "`[2, 4, 6]`" },
      { "term": "`[x for x in range(5) if x % 2 == 0]`", "match": "`[0, 2, 4]`" },
      { "term": "`[x.upper() for x in \"abc\"]`", "match": "`['A', 'B', 'C']`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid list comprehensions? (Select all that apply)",
    "options": [
      "`[x + 1 for x in range(5)]`",
      "`[x * 2 in range(3)]`",
      "`[x for x in range(5) if x % 2 == 1]`"
    ],
    "answer": [
      "`[x + 1 for x in range(5)]`",
      "`[x for x in range(5) if x % 2 == 1]`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the elements of the list comprehension in the correct order:",
    "options": [
      "Expression",
      "For clause",
      "Conditional (optional)"
    ],
    "correctOrder": [
      "Expression",
      "For clause",
      "Conditional (optional)"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\n[x for x range(5)]\n```",
    "options": [
      "The `for` keyword is missing",
      "The parentheses are incorrect",
      "The `in` keyword is missing"
    ],
    "answer": "The `in` keyword is missing",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to generate a list of squares from 1 to 5.\n- `[x**2 for x in range(___, ___)]`",
    "answer": "1, 6",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Accessing, modifying, and deleting key-value pairs",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a dictionary with keys \"name\" and \"age\" and corresponding values \"John\" and 30.\n```python\nmy_dict = {___: \"John\", ___: 30}\n```",
    "answer": "\"name\", \"age\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following correctly creates a dictionary with two key-value pairs?",
    "options": [
      "`my_dict = {name: \"John\", age: 30}`",
      "`my_dict = [\"name\": \"John\", \"age\": 30]`",
      "`my_dict = {\"name\": \"John\", \"age\": 30}`"
    ],
    "answer": "`my_dict = {\"name\": \"John\", \"age\": 30}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A dictionary can store multiple data types as values, such as integers, strings, and lists.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python dictionary with keys \"city\" and \"country\" and corresponding values \"Paris\" and \"France\".",
    "options": ["`\"city\"`", "`\"Paris\"`", "`(\"country\")`", "`\"France\"`", "`=`", "`my_dict`"],
    "answer": ["`my_dict`", "`=`", "`{\"city\": \"Paris\", \"country\": \"France\"}`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_dict = {\"name\": \"Alice\", \"age\": 25}\nprint(my_dict[\"name\"])\n```",
    "options": [
      "`Alice`",
      "`name`",
      "`25`"
    ],
    "answer": "`Alice`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`my_dict = {\"name\": \"John\", \"age\": 30}`", "match": "`John`" },
      { "term": "`my_dict = {\"city\": \"London\", \"country\": \"UK\"}`", "match": "`London`" },
      { "term": "`my_dict = {\"fruit\": \"apple\", \"color\": \"red\"}`", "match": "`apple`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to create a dictionary? (Select all that apply)",
    "options": [
      "`my_dict = {1: \"apple\", 2: \"banana\"}`",
      "`my_dict = [\"apple\", \"banana\"]`",
      "`my_dict = {\"name\": \"John\", \"age\": 30}`"
    ],
    "answer": [
      "`my_dict = {1: \"apple\", 2: \"banana\"}`",
      "`my_dict = {\"name\": \"John\", \"age\": 30}`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create a dictionary and access a value:",
    "options": [
      "Define the dictionary with key-value pairs.",
      "Access the value using the key.",
      "Print the value."
    ],
    "correctOrder": [
      "Define the dictionary with key-value pairs.",
      "Access the value using the key.",
      "Print the value."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nmy_dict = (\"name\": \"John\", \"age\": 30)\n```",
    "options": [
      "Dictionaries must use curly braces, not parentheses.",
      "The key-value pair syntax is incorrect.",
      "The values should be in square brackets."
    ],
    "answer": "Dictionaries must use curly braces, not parentheses.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a dictionary with keys \"first_name\" and \"last_name\", and values \"John\" and \"Doe\".\n```python\nmy_dict = {___: \"John\", ___: \"Doe\"}\nprint(my_dict)\n```",
    "answer": "\"first_name\", \"last_name\"",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Dictionary methods: keys(), values(), items()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to get all the keys from the dictionary `person`.\n```python\nperson = {\"name\": \"Alice\", \"age\": 25}\nkeys = person[___]()\n```",
    "answer": "keys",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which method returns all the values from the dictionary `person`?",
    "options": [
      "`person.keys()`",
      "`person.values()`",
      "`person.items()`"
    ],
    "answer": "`person.values()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `items()` method returns a list of tuples, where each tuple contains a key-value pair from the dictionary.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to get the correct method for retrieving both keys and values from a dictionary.",
    "options": ["`items()`", "`person`"],
    "answer": ["`person`", "`.items()`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nperson = {\"name\": \"Bob\", \"age\": 30}\nprint(person.items())\n```",
    "options": [
      "`{\"name\": \"Bob\", \"age\": 30}`",
      "`[(\"name\", \"Bob\"), (\"age\", 30)]`",
      "`[\"name\", \"age\"]`"
    ],
    "answer": "`[(\"name\", \"Bob\"), (\"age\", 30)]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its expected output:",
    "options": [
      { "term": "`person = {\"name\": \"John\", \"age\": 45}`", "match": "" },
      { "term": "`print(person.keys())`", "match": "`dict_keys(['name', 'age'])`" },
      { "term": "`print(person.values())`", "match": "`dict_values(['John', 45])`" },
      { "term": "`print(person.items())`", "match": "`dict_items([('name', 'John'), ('age', 45)])`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods are used to retrieve information from a dictionary? (Select all that apply)",
    "options": [
      "`person.values()`",
      "`person.keys()`",
      "`person.items()`"
    ],
    "answer": [
      "`person.values()`",
      "`person.keys()`",
      "`person.items()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to retrieve keys, values, and key-value pairs from a dictionary:",
    "options": [
      "Use `person.keys()` to get the keys.",
      "Use `person.items()` to get key-value pairs.",
      "Use `person.values()` to get the values."
    ],
    "correctOrder": [
      "Use `person.keys()` to get the keys.",
      "Use `person.values()` to get the values.",
      "Use `person.items()` to get key-value pairs."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nperson = {\"name\": \"Alice\", \"age\": 25}\nprint(person.item())\n```",
    "options": [
      "The `item()` method does not exist.",
      "The correct method is `items()`.",
      "The method should be `keys()`."
    ],
    "answer": "The correct method is `items()`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print all the values from the dictionary `person`.\n```python\nperson = {\"name\": \"Alice\", \"age\": 30}\nvalues = person[___]()\nprint(values)\n```",
    "answer": "values",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Dictionary comprehensions",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a dictionary comprehension that squares each number from 1 to 5.\n```python\nsquared_dict = {x: x**2 for x in range(1, 6)}\n```",
    "answer": "{x: x**2 for x in range(1, 6)}",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is a valid dictionary comprehension to create a dictionary of squares for numbers from 1 to 3?",
    "options": [
      "`{x: x*2 for x in range(1, 4)}`",
      "`{x: x**2 for x in range(1, 4)}`",
      "`{x: x for x in range(1, 4)}`"
    ],
    "answer": "`{x: x**2 for x in range(1, 4)}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In a dictionary comprehension, the expression `x: x**2` means the key is `x` and the value is the square of `x`.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a dictionary comprehension that generates a dictionary where the keys are numbers from 1 to 3 and the values are their squares.",
    "options": ["`x:`", "`range(1, 4)`", "`x**2`", "`{`", "`for x in`", "`}`"],
    "answer": ["`{`", "`x:`", "`x**2`", "`for x in`", "`range(1, 4)`", "`}`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nsquared_dict = {x: x**2 for x in range(1, 4)}\nprint(squared_dict)\n```",
    "options": [
      "`{1: 1, 2: 4, 3: 9}`",
      "`{1: 1, 2: 2, 3: 3}`",
      "`{1: 2, 2: 4, 3: 6}`"
    ],
    "answer": "`{1: 1, 2: 4, 3: 9}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its expected output:",
    "options": [
      { "term": "`squared_dict = {x: x**2 for x in range(1, 6)}`", "match": "`{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}`" },
      { "term": "`print(squared_dict)`", "match": "" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid dictionary comprehensions? (Select all that apply)",
    "options": [
      "`{x: x**2 for x in range(1, 6)}`",
      "`{x: x for x in range(1, 6)}`",
      "`{x*2: x**2 for x in range(1, 4)}`"
    ],
    "answer": [
      "`{x: x**2 for x in range(1, 6)}`",
      "`{x: x for x in range(1, 6)}`",
      "`{x*2: x**2 for x in range(1, 4)}`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create a dictionary comprehension:",
    "options": [
      "Define the loop: `for x in range(1, 6)`",
      "Set the key-value pair: `x: x**2`",
      "Enclose the key-value pair inside curly braces: `{}`"
    ],
    "correctOrder": [
      "Define the loop: `for x in range(1, 6)`",
      "Set the key-value pair: `x: x**2`",
      "Enclose the key-value pair inside curly braces: `{}`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\ndict_comp = {x: x*2 for x in range(1, 4)}\nprint(dict_comp[4])\n```",
    "options": [
      "The key `4` does not exist in the dictionary.",
      "The dictionary comprehension is incorrect.",
      "The code should be using `x**2` instead of `x*2`."
    ],
    "answer": "The key `4` does not exist in the dictionary.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a dictionary comprehension that pairs each number from 1 to 3 with its cube.\n```python\ncube_dict = {x: x**___ for x in range(1, 4)}\n```",
    "answer": "3",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "10. Sets",
        "subtopics": [
          {
            "subtopic": "Creating and using sets",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a set containing the numbers 1, 2, and 3.\n```python\nmy_set = {___, ___, ___}\n```",
    "answer": "{1, 2, 3}",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct way to create an empty set?",
    "options": [
      "`empty_set = {}`",
      "`empty_set = set()`",
      "`empty_set = []`"
    ],
    "answer": "`empty_set = set()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A set in Python is an unordered collection of unique elements.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a set containing the elements `\"apple\"`, `\"banana\"`, and `\"cherry\"`.",
    "options": ["`apple`", "`banana`", "`{`", "`cherry`", "`}`"],
    "answer": ["`{`", "`apple`", "`banana`", "`cherry`", "`}`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nfruit_set = {\"apple\", \"banana\", \"cherry\"}\nprint(\"apple\" in fruit_set)\n```",
    "options": [
      "`True`",
      "`False`",
      "`Error`"
    ],
    "answer": "`True`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its expected output:",
    "options": [
      { "term": "`fruit_set = {\"apple\", \"banana\", \"cherry\"}`", "match": "`{\"apple\", \"banana\", \"cherry\"}`" },
      { "term": "`fruit_set.add(\"orange\")`", "match": "`{\"apple\", \"banana\", \"cherry\", \"orange\"}`" },
      { "term": "`print(fruit_set)`", "match": "`{\"apple\", \"banana\", \"cherry\", \"orange\"}`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following operations can be performed on sets? (Select all that apply)",
    "options": [
      "`add()`",
      "`append()`",
      "`remove()`"
    ],
    "answer": [
      "`add()`",
      "`remove()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to add an element to a set:",
    "options": [
      "Use the `add()` method on the set.",
      "Specify the element to be added.",
      "Use the `set` object."
    ],
    "correctOrder": [
      "Use the `set` object.",
      "Specify the element to be added.",
      "Use the `add()` method on the set."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nmy_set = {1, 2, 3}\nmy_set.add([4, 5])\nprint(my_set)\n```",
    "options": [
      "Sets cannot contain lists as elements.",
      "The `add()` method should be used with strings.",
      "The syntax is incorrect."
    ],
    "answer": "Sets cannot contain lists as elements.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a set with the elements `1, 2, 3` and check if `2` is present in the set.\n```python\nmy_set = {___, ___, ___}\nprint(2 in my_set)\n```",
    "answer": "1, 2, 3",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Set operations: union, intersection, difference, symmetric difference",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to perform a union of two sets, `set1` and `set2`.\n```python\nresult = set1 ___ set2\n```",
    "answer": "|",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which operator is used to find the intersection of two sets?",
    "options": [
      "`|`",
      "`&`",
      "`-`"
    ],
    "answer": "`&`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The symmetric difference between two sets includes elements that are present in either one of the sets but not in both.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to perform the difference between two sets `set1` and `set2`.",
    "options": ["`-`", "`set1`", "`set2`"],
    "answer": ["`set1`", "`-`", "`set2`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nprint(set1 & set2)\n```",
    "options": [
      "`{1, 2, 3, 4}`",
      "`{3, 4}`",
      "`{5, 6}`"
    ],
    "answer": "`{3, 4}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the set operation with the correct description:",
    "options": [
      { "term": "`set1 | set2`", "match": "Union: Elements present in either `set1` or `set2`." },
      { "term": "`set1 & set2`", "match": "Intersection: Elements present in both `set1` and `set2`." },
      { "term": "`set1 - set2`", "match": "Difference: Elements present in `set1` but not in `set2`." },
      { "term": "`set1 ^ set2`", "match": "Symmetric Difference: Elements present in either `set1` or `set2`, but not both." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following operations are valid for sets? (Select all that apply)",
    "options": [
      "`union()`",
      "`intersection()`",
      "`difference()`"
    ],
    "answer": [
      "`union()`",
      "`intersection()`",
      "`difference()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps in the correct order to calculate the symmetric difference between `set1` and `set2`:",
    "options": [
      "Apply the `^` operator to `set1` and `set2`.",
      "Print the result.",
      "Create two sets `set1` and `set2`."
    ],
    "correctOrder": [
      "Create two sets `set1` and `set2`.",
      "Apply the `^` operator to `set1` and `set2`.",
      "Print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code for calculating the union of two sets?\n```python\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nprint(set1 & set2)\n```",
    "options": [
      "The correct operator for union is `|`, not `&`.",
      "The `&` operator is used for union.",
      "The sets are incorrectly defined."
    ],
    "answer": "The correct operator for union is `|`, not `&`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to calculate the symmetric difference between two sets `set1` and `set2`.\n```python\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nresult = set1 ___ set2\nprint(result)\n```",
    "answer": "^",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Set methods: add(), remove(), discard()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to add an element `5` to a set `my_set`.\n```python\nmy_set._____(5)\n```",
    "answer": "add()",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which method will remove the element `4` from the set `my_set`?",
    "options": [
      "`my_set.remove(4)`",
      "`my_set.discard(4)`",
      "Both a) and b)"
    ],
    "answer": "Both a) and b)",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `remove()` method raises an error if the element is not found in the set.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to correctly remove an element `3` from a set `my_set` without raising an error if the element is not present.",
    "options": ["`my_set`", "`discard()`", "`3`"],
    "answer": ["`my_set`", "`.discard(3)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_set = {1, 2, 3, 4}\nmy_set.remove(3)\nprint(my_set)\n```",
    "options": [
      "`{1, 2, 4}`",
      "`{1, 2, 3, 4}`",
      "Error: Element not found"
    ],
    "answer": "`{1, 2, 4}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the set method with its description:",
    "options": [
      { "term": "`add(4)`", "match": "Adds an element to the set if it is not already present." },
      { "term": "`remove(2)`", "match": "Removes an element from the set, raises a `KeyError` if not found." },
      { "term": "`discard(5)`", "match": "Removes an element from the set, but does not raise an error if the element is not found." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods are used to remove an element from a set? (Select all that apply)",
    "options": [
      "`remove()`",
      "`discard()`",
      "`pop()`"
    ],
    "answer": [
      "`remove()`",
      "`discard()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps to add the element `7` to the set `my_set`:",
    "options": [
      "Call the `add()` method on the set.",
      "Create the set `my_set`.",
      "Pass the element `7` to the `add()` method."
    ],
    "correctOrder": [
      "Create the set `my_set`.",
      "Call the `add()` method on the set.",
      "Pass the element `7` to the `add()` method."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code for removing the element `2` from the set `my_set`?\n```python\nmy_set = {1, 2, 3}\nmy_set.remove(4)\n```",
    "options": [
      "The element `4` is not in the set, causing a `KeyError`.",
      "The `add()` method should be used instead of `remove()`.",
      "There is nothing wrong with the code."
    ],
    "answer": "The element `4` is not in the set, causing a `KeyError`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to remove the element `6` from the set `my_set` without raising an error if it is not present.\n```python\nmy_set = {1, 2, 3, 4}\nmy_set._____(6)\n```",
    "answer": "discard()",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "11. String Manipulation",
        "subtopics": [
          {
            "subtopic": "String slicing and indexing",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to add an element `5` to a set `my_set`.\n```python\nmy_set._____(5)\n```",
    "answer": "add()",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which method will remove the element `4` from the set `my_set`?",
    "options": [
      "`my_set.remove(4)`",
      "`my_set.discard(4)`",
      "Both a) and b)"
    ],
    "answer": "Both a) and b)",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `remove()` method raises an error if the element is not found in the set.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to correctly remove an element `3` from a set `my_set` without raising an error if the element is not present.",
    "options": ["`my_set`", "`discard()`", "`3`"],
    "answer": ["`my_set`", "`.discard(3)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_set = {1, 2, 3, 4}\nmy_set.remove(3)\nprint(my_set)\n```",
    "options": [
      "`{1, 2, 4}`",
      "`{1, 2, 3, 4}`",
      "Error: Element not found"
    ],
    "answer": "`{1, 2, 4}`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the set method with its description:",
    "options": [
      { "term": "`add(4)`", "match": "Adds an element to the set if it is not already present." },
      { "term": "`remove(2)`", "match": "Removes an element from the set, raises a `KeyError` if not found." },
      { "term": "`discard(5)`", "match": "Removes an element from the set, but does not raise an error if the element is not found." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods are used to remove an element from a set? (Select all that apply)",
    "options": [
      "`remove()`",
      "`discard()`",
      "`pop()`"
    ],
    "answer": [
      "`remove()`",
      "`discard()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps to add the element `7` to the set `my_set`:",
    "options": [
      "Call the `add()` method on the set.",
      "Create the set `my_set`.",
      "Pass the element `7` to the `add()` method."
    ],
    "correctOrder": [
      "Create the set `my_set`.",
      "Call the `add()` method on the set.",
      "Pass the element `7` to the `add()` method."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code for removing the element `2` from the set `my_set`?\n```python\nmy_set = {1, 2, 3}\nmy_set.remove(4)\n```",
    "options": [
      "The element `4` is not in the set, causing a `KeyError`.",
      "The `add()` method should be used instead of `remove()`.",
      "There is nothing wrong with the code."
    ],
    "answer": "The element `4` is not in the set, causing a `KeyError`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to remove the element `6` from the set `my_set` without raising an error if it is not present.\n```python\nmy_set = {1, 2, 3, 4}\nmy_set._____(6)\n```",
    "answer": "discard()",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "String methods: split(), join(), replace(), strip(), etc.",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to get the first character from the string `my_string = \"Python\"`.\n```python\nmy_string[___]\n```",
    "answer": "0",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nmy_string = \"Python\"\nprint(my_string[1:4])\n```",
    "options": [
      "`Pyt`",
      "`ytho`",
      "`yth`"
    ],
    "answer": "`yth`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, string indices start from `1`.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to correctly slice the string `my_string = \"Python\"` to get the last 3 characters.",
    "options": ["`my_string[`", "`3:`", "`]`"],
    "answer": ["`my_string`", "`[-3:]`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_string = \"Programming\"\nprint(my_string[3:7])\n```",
    "options": [
      "`Gram`",
      "`ogram`",
      "`gra`"
    ],
    "answer": "`ogram`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the index of the string `my_string = \"Python\"` with its corresponding character:",
    "options": [
      { "term": "`my_string[0]`", "match": "`P`" },
      { "term": "`my_string[2]`", "match": "`t`" },
      { "term": "`my_string[5]`", "match": "`n`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following slices will return the first three characters of the string `my_string = \"Python\"`? (Select all that apply)",
    "options": [
      "`my_string[:3]`",
      "`my_string[0:3]`",
      "`my_string[1:3]`"
    ],
    "answer": [
      "`my_string[:3]`",
      "`my_string[0:3]`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps to extract the substring `Pro` from the string `my_string = \"Programming\"`:",
    "options": [
      "Get the characters from index 0 to 3.",
      "Create the string `my_string = \"Programming\"`.",
      "Use slicing on `my_string`."
    ],
    "correctOrder": [
      "Create the string `my_string = \"Programming\"`.",
      "Use slicing on `my_string`.",
      "Get the characters from index 0 to 3."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code for slicing the string `my_string = \"Python\"`?\n```python\nmy_string[2:10]\n```",
    "options": [
      "The end index is out of range.",
      "The slice will return an empty string.",
      "There is nothing wrong with the code."
    ],
    "answer": "There is nothing wrong with the code.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to get the last 2 characters of the string `my_string = \"Hello\"`.\n```python\nmy_string[____]\n```",
    "answer": "-2:",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "String formatting with f-strings and .format()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to split the string `my_string = \"Hello World\"` by the space character.\n```python\nmy_string.___(' ')\n```",
    "answer": "split()",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nmy_string = \"Hello, Python!\"\nprint(my_string.replace(\"Python\", \"World\"))\n```",
    "options": [
      "`Hello, World!`",
      "`Hello, Python!`",
      "`Python, Hello!`"
    ],
    "answer": "`Hello, World!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `strip()` method in Python removes leading and trailing whitespace from a string.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to form a Python statement that joins a list of words `my_list = [\"Hello\", \"World\"]` with a space.",
    "options": ["`join()`", "`my_list`", "`(\" \")`"],
    "answer": ["`\" \"`", "`.join(my_list)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmy_string = \"  Python Programming  \"\nprint(my_string.strip())\n```",
    "options": [
      "`Python Programming`",
      "`  Python Programming  `",
      "`PythonProgramming`"
    ],
    "answer": "`Python Programming`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the string method with its purpose:",
    "options": [
      { "term": "`split()`", "match": "Splits the string into a list based on a delimiter." },
      { "term": "`replace()`", "match": "Replaces part of the string with another string." },
      { "term": "`strip()`", "match": "Removes leading and trailing whitespace." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods can be used to modify a string in Python? (Select all that apply)",
    "options": [
      "`replace()`",
      "`strip()`",
      "`split()`"
    ],
    "answer": [
      "`replace()`",
      "`strip()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps to correctly split the string `my_string = \"apple,banana,orange\"` by the comma.",
    "options": [
      "Create the string `my_string = \"apple,banana,orange\"`.",
      "Use `split()` to split the string by the comma.",
      "Assign the result to a variable."
    ],
    "correctOrder": [
      "Create the string `my_string = \"apple,banana,orange\"`.",
      "Use `split()` to split the string by the comma.",
      "Assign the result to a variable."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code for replacing `World` with `Python` in the string `my_string = \"Hello World!\"`?\n```python\nmy_string.replace( \"World\" \"Python\")\n```",
    "options": [
      "The replace method syntax is incorrect.",
      "There is a space missing between the two strings.",
      "The method is not called on the string."
    ],
    "answer": "The replace method syntax is incorrect.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to split the string `my_string = \"apple,banana,orange\"` into a list of words.\n```python\nmy_string.___(\",\")\n```",
    "answer": "split()",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Working with multi-line strings",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a multi-line string using triple quotes:\n```python\nmulti_line_string = ___\n\"This is the first line.\"\n\"This is the second line.\"\n\"This is the third line.\"\n```",
    "answer": "\"\"\"This is the first line.\\nThis is the second line.\\nThis is the third line.\"\"\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct way to create a multi-line string in Python?",
    "options": [
      "`multi_line_string = '''Hello\\nWorld\\nPython'''`",
      "`multi_line_string = \"Hello\\nWorld\\nPython\"`",
      "`multi_line_string = {Hello\\nWorld\\nPython}`"
    ],
    "answer": "`multi_line_string = '''Hello\\nWorld\\nPython'''`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Multi-line strings in Python are created by using triple quotes (`\"\"\"` or `'''`).",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python multi-line string:",
    "options": ["`'''`", "`line`", "`second`", "`This`", "`is`", "`the`", "`first`", "`line`"],
    "answer": ["`\"\"\"This is the first line.\\nThis is the second line.\"\"\"`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nmulti_line_string = \"\"\"Hello,\nWorld!\nPython is awesome.\"\"\"\nprint(multi_line_string)\n```",
    "options": [
      "`Hello, World! Python is awesome.`",
      "`Hello, World! Python is awesome`",
      "```\nHello,\nWorld!\nPython is awesome.\n```"
    ],
    "answer": "```\nHello,\nWorld!\nPython is awesome.\n```",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`multi_line_string = \"\"\"Line 1\\nLine 2\\nLine 3\"\"\"`", "match": "`Line 1\\nLine 2\\nLine 3`" },
      { "term": "`multi_line_string = \"\"\"Line 1\\nLine 2\"\"\"`", "match": "`Line 1\\nLine 2`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to create a multi-line string in Python? (Select all that apply)",
    "options": [
      "`multi_line_string = '''First line\\nSecond line\\nThird line'''`",
      "`multi_line_string = \"\"\"First line\\nSecond line\\nThird line\"\"\"`",
      "`multi_line_string = \"First line\\nSecond line\\nThird line\"`"
    ],
    "answer": [
      "`multi_line_string = '''First line\\nSecond line\\nThird line'''`",
      "`multi_line_string = \"\"\"First line\\nSecond line\\nThird line\"\"\"`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps in the correct order to create a multi-line string and print it:",
    "options": [
      "Create a multi-line string using triple quotes.",
      "Assign it to a variable.",
      "Print the variable."
    ],
    "correctOrder": [
      "Create a multi-line string using triple quotes.",
      "Assign it to a variable.",
      "Print the variable."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this code?\n```python\nmulti_line_string = '''Hello,\nWorld!\nPython is fun\nprint(multi_line_string)\n```",
    "options": [
      "The closing triple quotes are missing.",
      "The string should be enclosed with single quotes instead of triple quotes.",
      "The `print()` function is not correct."
    ],
    "answer": "The closing triple quotes are missing.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a multi-line string:\n```python\nmulti_line_string = ___\n\"Line 1\\nLine 2\\nLine 3\"\n```",
    "answer": "\"\"\"Line 1\\nLine 2\\nLine 3\"\"\"",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      }
    ]
  },
  {
    "phase": "Phase 3: Intermediate Topics",
    "topics": [
      {
        "topic": "12. File Handling",
        "subtopics": [
          {
            "subtopic": "Reading from and writing to text files",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to open a file named `data.txt` in read mode.\n- `file = open(\"data.txt\", ___)`",
    "answer": "\"r\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which mode should be used to write data to a file without deleting its existing content?",
    "options": [
      "`\"w\"`",
      "`\"r\"`",
      "`\"a\"`"
    ],
    "answer": "`\"a\"`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, the `read()` function reads the entire content of a file as a string.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that writes `\"Hello\"` to a file named `sample.txt`.",
    "options": ["`\"Hello\"`", "`write`", "`file.`", "`sample.txt`", "`open`", "`\"w\"`", "`=`", "`as`", "`f`"],
    "answer": ["`with open(\"sample.txt\", \"w\") as f:`", "`f.write(\"Hello\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will be the content of the `output.txt` file after running the following code?\n```python\nwith open(\"output.txt\", \"w\") as f:\n    f.write(\"Python is fun!\")\n```",
    "options": [
      "`Python is fun!`",
      "`output.txt` will be empty",
      "The file will contain previous data and \"Python is fun!\""
    ],
    "answer": "`Python is fun!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`with open(\"file.txt\", \"w\") as f: f.write(\"Hello\")`", "match": "" },
      { "term": "`with open(\"file.txt\", \"r\") as f: print(f.read())`", "match": "`Hello`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to read from a file in Python? (Select all that apply)",
    "options": [
      "`file.read()`",
      "`file.readline()`",
      "`file.scan()`"
    ],
    "answer": [
      "`file.read()`",
      "`file.readline()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to write data to a file correctly:",
    "options": [
      "Use `open()` with the correct mode",
      "Call the `write()` method",
      "Close the file using `close()`"
    ],
    "correctOrder": [
      "Use `open()` with the correct mode",
      "Call the `write()` method",
      "Close the file using `close()`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nfile = open(\"notes.txt\", \"r\")\nfile.write(\"New content\")\nfile.close()\n```",
    "options": [
      "The file should be opened in write mode",
      "`write()` should be replaced with `append()`",
      "The file should be closed before writing"
    ],
    "answer": "The file should be opened in write mode",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to read all lines from a file named `info.txt`.\n- `with open(\"info.txt\", \"r\") as f: lines = f.___()`",
    "answer": "readlines()",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "File modes: r, w, a, x",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to open a file named `notes.txt` in append mode.\n- `file = open(\"notes.txt\", ___)`",
    "answer": "\"a\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which file mode is used to create a new file, but raises an error if the file already exists?",
    "options": [
      "`\"w\"`",
      "`\"a\"`",
      "`\"x\"`"
    ],
    "answer": "`\"x\"`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The file mode `\"w\"` deletes the existing content of the file before writing new data.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that opens a file named `log.txt` in write mode.",
    "options": ["`\"w\"`", "`=`", "`file`", "`log.txt`", "`open`"],
    "answer": ["`file = open(\"log.txt\", \"w\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will happen if the following code is executed and `data.txt` already exists?\n```python\nfile = open(\"data.txt\", \"x\")\n```",
    "options": [
      "A new file will be created",
      "An error will occur",
      "The content of the file will be overwritten"
    ],
    "answer": "An error will occur",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the file mode with its function:",
    "options": [
      { "term": "`\"r\"`", "match": "Opens a file for reading (default mode)" },
      { "term": "`\"w\"`", "match": "Creates a new file or overwrites existing content" },
      { "term": "`\"a\"`", "match": "Appends content to an existing file" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following file modes will raise an error if the file does not exist? (Select all that apply)",
    "options": [
      "`\"r\"`",
      "`\"w\"`",
      "`\"x\"`"
    ],
    "answer": [
      "`\"r\"`",
      "`\"x\"`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to open a file in append mode and write data correctly:",
    "options": [
      "Use `open()` with mode `\"a\"`",
      "Call the `write()` method",
      "Close the file using `close()`"
    ],
    "correctOrder": [
      "Use `open()` with mode `\"a\"`",
      "Call the `write()` method",
      "Close the file using `close()`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nfile = open(\"report.txt\", \"r\")\nfile.write(\"New data\")\nfile.close()\n```",
    "options": [
      "The file should be opened in write mode",
      "The `write()` function should be replaced with `append()`",
      "The `close()` function should be called before writing"
    ],
    "answer": "The file should be opened in write mode",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a new file named `log.txt` but raise an error if it already exists.\n- `file = open(\"log.txt\", ___)`",
    "answer": "\"x\"",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Context managers with with open() for safe file handling",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to open a file named `data.txt` safely using a context manager.\n- `with open(\"data.txt\", ___) as file:`",
    "answer": "\"r\"",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the primary advantage of using `with open()` for file handling in Python?",
    "options": [
      "It automatically closes the file after usage.",
      "It improves the speed of file operations.",
      "It allows opening multiple files at once."
    ],
    "answer": "It automatically closes the file after usage.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `with open()` statement automatically closes the file even if an exception occurs.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a correct Python statement for reading a file safely.",
    "options": ["`\"r\"`", "`open`", "`data.txt`", "`with`", "`as`", "`file:`"],
    "answer": ["`with open(\"data.txt\", \"r\") as file:`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code do?\n```python\nwith open(\"info.txt\", \"w\") as f:\n    f.write(\"Hello, World!\")\n```",
    "options": [
      "Raise an error if the file doesn't exist",
      "Write \"Hello, World!\" to the file and close it automatically",
      "Append \"Hello, World!\" to the file"
    ],
    "answer": "Write \"Hello, World!\" to the file and close it automatically",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the parts of the `with open()` statement with their purpose:",
    "options": [
      { "term": "`with open(\"data.txt\", \"r\")`", "match": "Open the file in read mode safely" },
      { "term": "`as file:`", "match": "Assign the opened file object to a variable" },
      { "term": "`file.read()`", "match": "Read the contents of the file" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements correctly use `with open()` in Python? (Select all that apply)",
    "options": [
      "`with open(\"notes.txt\", \"w\") as f:`",
      "`with open \"log.txt\", \"r\" as file:`",
      "`with open(\"config.txt\", \"a\") as config:`"
    ],
    "answer": [
      "`with open(\"notes.txt\", \"w\") as f:`",
      "`with open(\"config.txt\", \"a\") as config:`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to read data from a file safely using `with open()`:",
    "options": [
      "Use `open()` with a context manager",
      "Read the contents using `read()`",
      "Automatically close the file"
    ],
    "correctOrder": [
      "Use `open()` with a context manager",
      "Read the contents using `read()`",
      "Automatically close the file"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nwith open(\"report.txt\", \"r\")\n    data = file.read()\n```",
    "options": [
      "Missing colon after `open()` statement",
      "The file mode should be `\"w\"` instead of `\"r\"`",
      "The variable `file` is undefined"
    ],
    "answer": "Missing colon after `open()` statement",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to safely read a file named `document.txt`.\n- `with open(\"document.txt\", \"r\") as ___:`",
    "answer": "file",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Handling CSV files (optional)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to open a CSV file named `data.csv` in read mode.\n- `with open(\"data.csv\", ___) as file:`",
    "answer": "'r'",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which Python module is commonly used for handling CSV files?",
    "options": [
      "`json`",
      "`csv`",
      "`xml`"
    ],
    "answer": "`csv`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `csv.reader()` function returns each row of a CSV file as a list.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to write code that reads a CSV file using Python.",
    "options": ["`open`", "`as`", "`import`", "`csv`", "`with`", "`file`", "`reader(csv.file)`"],
    "answer": ["`import csv`", "`with open(file) as f:`", "`csv.reader(f)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output if `data.csv` contains the row `Name, Age, City`?\n```python\nimport csv\nwith open(\"data.csv\", 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n```",
    "options": [
      "`['Name', 'Age', 'City']`",
      "`Name, Age, City`",
      "`{Name: Age, City}`"
    ],
    "answer": "`['Name', 'Age', 'City']`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the CSV-related function to its purpose:",
    "options": [
      { "term": "`csv.reader(file)`", "match": "Reads CSV rows as lists" },
      { "term": "`csv.writer(file)`", "match": "Writes data to a CSV file" },
      { "term": "`csv.DictReader(file)`", "match": "Reads CSV rows as dictionaries" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to read a CSV file in Python? (Select all that apply)",
    "options": [
      "`csv.open('file.csv')`",
      "`csv.reader(open('file.csv'))`",
      "`with open('file.csv') as f: csv.reader(f)`"
    ],
    "answer": [
      "`csv.reader(open('file.csv'))`",
      "`with open('file.csv') as f: csv.reader(f)`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to write data to a CSV file using Python:",
    "options": [
      "Open file in write mode",
      "Use `csv.writer()`",
      "Write rows using `writerow()`"
    ],
    "correctOrder": [
      "Open file in write mode",
      "Use `csv.writer()`",
      "Write rows using `writerow()`"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nimport csv\nfile = open(\"data.csv\", 'r')\nreader = csv.read(file)\n```",
    "options": [
      "The file should be opened in write mode",
      "The `csv.read()` function does not exist",
      "The `import` statement is incorrect"
    ],
    "answer": "The `csv.read()` function does not exist",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to write a row of data into a CSV file.\n```python\nimport csv\nwith open(\"output.csv\", ___) as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Name\", \"Age\", \"City\"])\n```",
    "answer": "'w'",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "13. Error and Exception Handling",
        "subtopics": [
          {
            "subtopic": "Try-except blocks for catching exceptions",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to catch an exception in Python.\n```python\ntry:\n    x = 1 / 0\nexcept ___:\n    print(\"Error occurred\")\n```",
    "answer": "ZeroDivisionError",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the correct syntax for handling exceptions in Python?",
    "options": [
      "`try: ... catch:`",
      "`attempt: ... rescue:`",
      "`try: ... except:`"
    ],
    "answer": "`try: ... except:`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `except` block will execute only if an exception occurs in the `try` block.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that handles exceptions.",
    "options": ["`print`", "`except`", "`\"An error occurred\"`", "`try`", "`as`", "`e`", "`Exception`", "`:`"],
    "answer": [
      "`try:`",
      "`    print(1 / 0)`",
      "`except Exception as e:`",
      "`    print(\"An error occurred\")`"
    ],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\ntry:\n    num = int(\"abc\")\nexcept ValueError:\n    print(\"Invalid input\")\n```",
    "options": [
      "`Invalid input`",
      "`abc`",
      "`ValueError`"
    ],
    "answer": "`Invalid input`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the exception type with the error it handles:",
    "options": [
      { "term": "`ZeroDivisionError`", "match": "Trying to divide by zero" },
      { "term": "`ValueError`", "match": "Incorrect data type conversion" },
      { "term": "`FileNotFoundError`", "match": "File does not exist" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid Python exception handling blocks? (Select all that apply)",
    "options": [
      "`try: ... except ValueError:`",
      "`try: ... finally:`",
      "`try: ... catch Exception:`"
    ],
    "answer": [
      "`try: ... except ValueError:`",
      "`try: ... finally:`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps in the correct order for handling exceptions in Python:",
    "options": [
      "Write the code inside a `try` block",
      "Handle the exception inside an `except` block",
      "Execute cleanup code inside `finally` (optional)"
    ],
    "correctOrder": [
      "Write the code inside a `try` block",
      "Handle the exception inside an `except` block",
      "Execute cleanup code inside `finally` (optional)"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\ntry:\n    print(1 / 0)\nexcept:\n    print(\"Error\")\nfinally\n    print(\"Done\")\n```",
    "options": [
      "Missing colon after `finally`",
      "`print(1 / 0)` should be inside `except` block",
      "`except` block must specify an exception type"
    ],
    "answer": "Missing colon after `finally`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to catch a specific exception and print a message.\n```python\ntry:\n    num = int(\"abc\")\nexcept ___:\n    print(\"Invalid input\")\n```",
    "answer": "ValueError",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Raising exceptions with raise",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to catch an exception in Python.\n```python\ntry:\n    x = 1 / 0\nexcept ___:\n    print(\"Error occurred\")\n```",
    "answer": "ZeroDivisionError",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the correct syntax for handling exceptions in Python?",
    "options": [
      "`try: ... catch:`",
      "`attempt: ... rescue:`",
      "`try: ... except:`"
    ],
    "answer": "`try: ... except:`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `except` block will execute only if an exception occurs in the `try` block.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that handles exceptions.",
    "options": ["`print`", "`except`", "`\"An error occurred\"`", "`try`", "`as`", "`e`", "`Exception`", "`:`"],
    "answer": [
      "`try:`",
      "`    print(1 / 0)`",
      "`except Exception as e:`",
      "`    print(\"An error occurred\")`"
    ],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\ntry:\n    num = int(\"abc\")\nexcept ValueError:\n    print(\"Invalid input\")\n```",
    "options": [
      "`Invalid input`",
      "`abc`",
      "`ValueError`"
    ],
    "answer": "`Invalid input`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the exception type with the error it handles:",
    "options": [
      { "term": "`ZeroDivisionError`", "match": "Trying to divide by zero" },
      { "term": "`ValueError`", "match": "Incorrect data type conversion" },
      { "term": "`FileNotFoundError`", "match": "File does not exist" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid Python exception handling blocks? (Select all that apply)",
    "options": [
      "`try: ... except ValueError:`",
      "`try: ... finally:`",
      "`try: ... catch Exception:`"
    ],
    "answer": [
      "`try: ... except ValueError:`",
      "`try: ... finally:`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps in the correct order for handling exceptions in Python:",
    "options": [
      "Write the code inside a `try` block",
      "Handle the exception inside an `except` block",
      "Execute cleanup code inside `finally` (optional)"
    ],
    "correctOrder": [
      "Write the code inside a `try` block",
      "Handle the exception inside an `except` block",
      "Execute cleanup code inside `finally` (optional)"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\ntry:\n    print(1 / 0)\nexcept:\n    print(\"Error\")\nfinally\n    print(\"Done\")\n```",
    "options": [
      "Missing colon after `finally`",
      "`print(1 / 0)` should be inside `except` block",
      "`except` block must specify an exception type"
    ],
    "answer": "Missing colon after `finally`",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to catch a specific exception and print a message.\n```python\ntry:\n    num = int(\"abc\")\nexcept ___:\n    print(\"Invalid input\")\n```",
    "answer": "ValueError",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Using finally for clean-up actions",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to raise a `ValueError` with the message \"Invalid input\".\n```python\n___ ValueError(\"Invalid input\")\n```",
    "answer": "raise",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What keyword is used in Python to manually trigger an exception?",
    "options": [
      "`throw`",
      "`raise`",
      "`error`"
    ],
    "answer": "`raise`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `raise` statement can only be used inside an `except` block.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python statement for raising an exception.",
    "options": ["`Exception`", "`\"Something went wrong!\"`", "`raise`"],
    "answer": ["`raise Exception(\"Something went wrong!\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\ndef check_age(age):\n    if age < 18:\n        raise ValueError(\"Too young\")\n    return \"Access granted\"\nprint(check_age(15))\n```",
    "options": [
      "`Too young`",
      "`Access granted`",
      "`15`"
    ],
    "answer": "`Too young`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the following `raise` statements with their expected exceptions:",
    "options": [
      { "term": "`raise ValueError(\"Invalid number\")`", "match": "`Invalid number`" },
      { "term": "`raise TypeError(\"Wrong type\")`", "match": "`Wrong type`" },
      { "term": "`raise KeyError(\"Missing key\")`", "match": "`Missing key`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements will correctly raise an exception in Python? (Select all that apply)",
    "options": [
      "`raise ValueError(\"Invalid input\")`",
      "`raise \"Error occurred\"`",
      "`raise Exception(\"Something went wrong\")`"
    ],
    "answer": [
      "`raise ValueError(\"Invalid input\")`",
      "`raise Exception(\"Something went wrong\")`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps to properly raise and handle an exception:",
    "options": [
      "Use a `try` block to write code.",
      "Use the `raise` statement to generate an exception.",
      "Use an `except` block to catch the exception."
    ],
    "correctOrder": [
      "Use a `try` block to write code.",
      "Use the `raise` statement to generate an exception.",
      "Use an `except` block to catch the exception."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nraise ValueError, \"Invalid input\"\n```",
    "options": [
      "The comma should be replaced with parentheses",
      "`raise` must be lowercase",
      "The exception message should not contain spaces"
    ],
    "answer": "The comma should be replaced with parentheses",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to raise a `TypeError` if a non-integer is passed.\n```python\ndef check_number(num):\n    if not isinstance(num, int):\n        raise ___(\"Expected an integer\")\n```",
    "answer": "TypeError",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Custom exceptions (optional)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to ensure that a clean-up action is performed regardless of whether an exception occurred.\n```python\ntry:\n    # code that may raise an exception\nfinally:\n    ___\n```",
    "answer": "# code for clean-up actions",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the purpose of using a `finally` block in Python?",
    "options": [
      "To catch exceptions",
      "To handle errors",
      "To perform clean-up actions, regardless of an exception"
    ],
    "answer": "To perform clean-up actions, regardless of an exception",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `finally` block will not execute if an exception is raised in the `try` block.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python statement for handling a `finally` block.",
    "options": ["`finally`", "`try`", "`block`", "`cleanup`"],
    "answer": ["`try:`", "`# code block`", "`finally:`", "`# cleanup actions`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\ntry:\n    print(\"Trying something...\")\n    x = 1 / 0  # Raises a ZeroDivisionError\nexcept ZeroDivisionError:\n    print(\"Caught exception!\")\nfinally:\n    print(\"Cleaning up!\")\n```",
    "options": [
      "`Trying something...`, `Caught exception!`, `Cleaning up!`",
      "`Trying something...`, `Cleaning up!`",
      "`Caught exception!`, `Cleaning up!`"
    ],
    "answer": "`Trying something...`, `Caught exception!`, `Cleaning up!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its expected output:",
    "options": [
      { "term": "`try: 1 / 0 except ZeroDivisionError: print(\"Error!\") finally: print(\"End of block\")`", "match": "`Error!`, `End of block`" },
      { "term": "`try: x = \"Hello\" except ValueError: print(\"ValueError!\") finally: print(\"End of block\")`", "match": "`End of block`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are true about the `finally` block? (Select all that apply)",
    "options": [
      "It is executed even if no exception is raised.",
      "It can contain a return statement.",
      "It is skipped if an exception is handled in the `except` block."
    ],
    "answer": [
      "It is executed even if no exception is raised.",
      "It can contain a return statement."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following blocks in the correct order to use `finally` for clean-up actions:",
    "options": [
      "`try` block: Code that may raise an exception",
      "`except` block: Handle the exception",
      "`finally` block: Perform clean-up actions"
    ],
    "correctOrder": [
      "`try` block: Code that may raise an exception",
      "`except` block: Handle the exception",
      "`finally` block: Perform clean-up actions"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\ntry:\n    print(\"Trying...\")\nfinally:\n    print(\"Clean-up!\")\n    return \"Done!\"\n```",
    "options": [
      "The `finally` block cannot contain a `return` statement.",
      "The `finally` block should not be placed before the `try` block.",
      "The `return` statement is missing inside the `try` block."
    ],
    "answer": "The `finally` block cannot contain a `return` statement.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to ensure that a file is properly closed after performing some file operations.\n```python\ntry:\n    file = open(\"file.txt\", \"r\")\n    # Perform file operations\nfinally:\n    file.____()\n```",
    "answer": "close()",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "14. Object-Oriented Programming (OOP) Basics",
        "subtopics": [
          {
            "subtopic": "Defining and using classes",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a class called `Car` with an `__init__` method that takes `make` and `model` as parameters.\n```python\nclass ___:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n```",
    "answer": "Car",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following correctly defines a class named `Person`?",
    "options": [
      "`def Person:`",
      "`class Person:`",
      "`class Person()`"
    ],
    "answer": "`class Person:`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, classes are used to create objects that represent real-world entities.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to define a simple class with an `__init__` method.",
    "options": ["`class`", "`Person`", "`def`", "`__init__`", "`self`", "`name`", "`age`"],
    "answer": ["`class Person:`", "`    def __init__(self, name, age):`", "`        self.name = name`", "`        self.age = age`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nclass Dog:\n    def __init__(self, name):\n        self.name = name\ndog = Dog(\"Buddy\")\nprint(dog.name)\n```",
    "options": [
      "`Dog`",
      "`Buddy`",
      "`name`"
    ],
    "answer": "`Buddy`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`class Car: def __init__(self, make, model): self.make = make self.model = model`", "match": "`Car`" },
      { "term": "`my_car = Car(\"Toyota\", \"Camry\")`", "match": "`Error`" },
      { "term": "`print(my_car.make, my_car.model)`", "match": "`Toyota Camry`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are true about classes in Python? (Select all that apply)",
    "options": [
      "A class can have multiple methods.",
      "A class is created using the `def` keyword.",
      "A class is used to define the blueprint for objects."
    ],
    "answer": [
      "A class can have multiple methods.",
      "A class is used to define the blueprint for objects."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define and use a class:",
    "options": [
      "Create a class with an `__init__` method.",
      "Create an instance of the class.",
      "Access the instance's attributes."
    ],
    "correctOrder": [
      "Create a class with an `__init__` method.",
      "Create an instance of the class.",
      "Access the instance's attributes."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code?\n```python\nclass Animal:\n    def __init__(self, species):\n        self.species = species\ndog = Animal(\"dog\")\nprint(dog.species, dog.name)\n```",
    "options": [
      "The `name` attribute is missing in the `__init__` method.",
      "The class definition is incorrect.",
      "The `print` statement is incorrect."
    ],
    "answer": "The `name` attribute is missing in the `__init__` method.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to define a class `Person` and initialize `name` and `age` attributes.\n```python\nclass ___:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```",
    "answer": "Person",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Creating objects (instances)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create an instance of the `Person` class with `name` as `\"Alice\"` and `age` as `30`.\n```python\nperson = Person(___, ___)\n```",
    "answer": "(\"Alice\", 30)",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following correctly creates an object from the `Car` class?",
    "options": [
      "`my_car = Car()`",
      "`Car = my_car()`",
      "`Car(my_car)`"
    ],
    "answer": "`my_car = Car()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "An object is an instance of a class, created by calling the class name followed by parentheses.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create an object of the `Book` class with title `\"Python Basics\"` and author `\"John\"`.",
    "options": ["`Book`", "`title`", "`(\"Python Basics\")`", "`author`", "`John`"],
    "answer": ["`book = Book(\"Python Basics\", \"John\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nclass Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\ndog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(dog.name)\n```",
    "options": [
      "`Golden Retriever`",
      "`Buddy`",
      "`Dog`"
    ],
    "answer": "`Buddy`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`class Animal: def __init__(self, species): self.species = species`", "match": "`Animal`" },
      { "term": "`my_animal = Animal(\"Cat\")`", "match": "`Cat`" },
      { "term": "`print(my_animal.species)`", "match": "`Cat`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to create an object in Python? (Select all that apply)",
    "options": [
      "`my_object = ClassName()`",
      "`ClassName.my_object = ()`",
      "`my_object = ClassName()`"
    ],
    "answer": [
      "`my_object = ClassName()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create and use an object:",
    "options": [
      "Define a class.",
      "Instantiate the class to create an object.",
      "Access the object's attributes or methods."
    ],
    "correctOrder": [
      "Define a class.",
      "Instantiate the class to create an object.",
      "Access the object's attributes or methods."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\nmy_car = Car(\"Toyota\", \"Corolla\")\nprint(my_car.make)\nprint(my_car.color)\n```",
    "options": [
      "The `color` attribute is missing in the `__init__` method.",
      "The class is not defined properly.",
      "The `print` statement is incorrect."
    ],
    "answer": "The `color` attribute is missing in the `__init__` method.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create an instance of the `Person` class with name `John` and age `25`.\n```python\nperson = ___(\"John\", 25)\n```",
    "answer": "Person",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Instance variables and methods",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create an instance variable `age` with the value `25` in the `Person` class.\n```python\nclass Person:\n    def __init__(self, name):\n        self.___ = 25\n```",
    "answer": "age",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following correctly accesses the `name` instance variable of an object `person`?",
    "options": [
      "`person.get_name()`",
      "`person.name()`",
      "`person.name`"
    ],
    "answer": "`person.name`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Instance variables are shared by all instances of a class in Python.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a method inside the `Car` class that prints the `make` and `model` of the car.",
    "options": ["`def`", "`Car`", "`print(self.make, self.model)`", "`__init__`", "`self`"],
    "answer": [
      "`class Car:`",
      "`    def __init__(self, make, model):`",
      "`        self.make = make`",
      "`        self.model = model`",
      "`    def print_car_details(self):`",
      "`        print(self.make, self.model)`"
    ],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nclass Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        return f\"{self.name} says Woof!\"\ndog = Dog(\"Max\", \"Bulldog\")\nprint(dog.bark())\n```",
    "options": [
      "`Woof`",
      "`Max says Woof!`",
      "`Max Bulldog`"
    ],
    "answer": "`Max says Woof!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`class Student:`", "match": "`Student`" },
      { "term": "`print(student.name)`", "match": "`Alex`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to define and use instance methods? (Select all that apply)",
    "options": [
      "`def method_name(self, parameters):`",
      "`def method_name(parameters):`",
      "`method_name(self, parameters)`"
    ],
    "answer": [
      "`def method_name(self, parameters):`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create an object with instance variables and methods:",
    "options": [
      "Define a method that uses instance variables.",
      "Define the `__init__` method to initialize instance variables.",
      "Create an object and assign it to a variable.",
      "Call the method using the object."
    ],
    "correctOrder": [
      "Define the `__init__` method to initialize instance variables.",
      "Create an object and assign it to a variable.",
      "Define a method that uses instance variables.",
      "Call the method using the object."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nclass Animal:\n    def __init__(self, species):\n        self.species = species\n    def print_details():\n        print(self.species)\nmy_animal = Animal(\"Lion\")\nmy_animal.print_details()\n```",
    "options": [
      "The `print_details` method is missing the `self` parameter.",
      "The `__init__` method should be inside `print_details`.",
      "The object `my_animal` should be created after calling the method."
    ],
    "answer": "The `print_details` method is missing the `self` parameter.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create an instance method that prints the name of the `Dog` class.\n```python\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n    def ___(self):\n        print(self.name)\ndog = Dog(\"Buddy\")\ndog.___()\n```",
    "answer": "print_name",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Constructor: __init__()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a constructor method `__init__()` that initializes the instance variable `name` with the value `\"John\"`.\n```python\nclass Person:\n    def ___(self, name):\n        self.name = name\n```",
    "answer": "__init__",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the purpose of the `__init__()` method in Python?",
    "options": [
      "It is used to define class methods.",
      "It initializes instance variables when a class object is created.",
      "It is used to delete an instance variable."
    ],
    "answer": "It initializes instance variables when a class object is created.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `__init__()` method is automatically called when a new object of a class is created in Python.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create the correct constructor method for initializing instance variables in a class.",
    "options": ["`def`", "`self`", "`__init__`", "`name`", "`age`", "`self.name`", "`self.age`"],
    "answer": [
      "`class Person:`",
      "`    def __init__(self, name, age):`",
      "`        self.name = name`",
      "`        self.age = age`"
    ],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n    def get_car_info(self):\n        return f\"{self.make} {self.model}\"\ncar = Car(\"Toyota\", \"Camry\")\nprint(car.get_car_info())\n```",
    "options": [
      "`Toyota`",
      "`Camry`",
      "`Toyota Camry`"
    ],
    "answer": "`Toyota Camry`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`class Dog:`", "match": "`None`" },
      { "term": "`print(dog.name)`", "match": "`Buddy`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are true about the `__init__()` constructor in Python? (Select all that apply)",
    "options": [
      "The `__init__()` method is automatically called when a new instance is created.",
      "The `__init__()` method is used to return values from a class.",
      "The `__init__()` method is defined with `self` as its first parameter."
    ],
    "answer": [
      "The `__init__()` method is automatically called when a new instance is created.",
      "The `__init__()` method is defined with `self` as its first parameter."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to define and use a constructor in a Python class:",
    "options": [
      "Define the `__init__()` method with parameters.",
      "Define the class with the necessary attributes.",
      "Create an object of the class, passing required arguments to `__init__()`.",
      "Access the object's instance variables."
    ],
    "correctOrder": [
      "Define the class with the necessary attributes.",
      "Define the `__init__()` method with parameters.",
      "Create an object of the class, passing required arguments to `__init__()`.",
      "Access the object's instance variables."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nclass Person:\n    def init(self, name):\n        self.name = name\nperson = Person(\"John\")\nprint(person.name)\n```",
    "options": [
      "The `__init__()` method should be used instead of `init()`.",
      "`name` should be passed without quotes in the constructor.",
      "`self.name` should be replaced with `person.name`."
    ],
    "answer": "The `__init__()` method should be used instead of `init()`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to initialize the `age` variable when an object of the `Student` class is created.\n```python\nclass Student:\n    def ___(self, name, age):\n        self.name = name\n        self.age = age\nstudent = Student(\"Alice\", 22)\nprint(student.age)\n```",
    "answer": "__init__",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Class variables and methods",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a class variable `count` that tracks the number of objects created in the `Person` class.\n```python\nclass Person:\n    ___ count = 0\n    def __init__(self, name):\n        self.name = name\n        Person.count += 1\n```",
    "answer": "count",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the difference between class variables and instance variables?",
    "options": [
      "Class variables are shared by all instances, while instance variables are unique to each instance.",
      "Class variables are stored in each object, while instance variables are shared.",
      "Class variables cannot be accessed by instance methods."
    ],
    "answer": "Class variables are shared by all instances, while instance variables are unique to each instance.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Class variables can be accessed using the class name or an instance of the class.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a correct statement to access a class variable `total` from the `Vehicle` class.",
    "options": ["`Vehicle`", "`total`", "`class`", "`Vehicle.total`"],
    "answer": ["`Vehicle.total`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nclass Employee:\n    count = 0\n    def __init__(self, name):\n        self.name = name\n        Employee.count += 1\nemployee1 = Employee(\"Alice\")\nemployee2 = Employee(\"Bob\")\nprint(Employee.count)\n```",
    "options": [
      "`0`",
      "`1`",
      "`2`"
    ],
    "answer": "`2`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`print(Student.total)`", "match": "`0`" },
      { "term": "`Student.total = 10`", "match": "`10`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are true about class variables? (Select all that apply)",
    "options": [
      "Class variables are shared across all instances of a class.",
      "Class variables can only be accessed using an instance of the class.",
      "Class variables are defined inside the class and outside any methods."
    ],
    "answer": [
      "Class variables are shared across all instances of a class.",
      "Class variables are defined inside the class and outside any methods."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create and access a class variable in Python:",
    "options": [
      "Define the class variable inside the class.",
      "Access the class variable using the class name.",
      "Create an instance of the class.",
      "Access the class variable using the instance."
    ],
    "correctOrder": [
      "Define the class variable inside the class.",
      "Create an instance of the class.",
      "Access the class variable using the class name.",
      "Access the class variable using the instance."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nclass Account:\n    balance = 0\n    def __init__(self, name):\n        self.name = name\n        Account.balance = 1000\naccount = Account(\"John\")\nprint(account.balance)\n```",
    "options": [
      "The class variable should be accessed via the class name, not an instance.",
      "`Account.balance` should be updated in the constructor using `self.balance`.",
      "The `balance` variable should not be defined as a class variable."
    ],
    "answer": "`Account.balance` should be updated in the constructor using `self.balance`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to properly define and access the `salary` class variable in the `Employee` class.\n```python\nclass Employee:\n    ___ salary = 50000\nemployee1 = Employee()\nprint(employee1.salary)\n```",
    "answer": "salary",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Inheritance and method overriding",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to properly inherit from the `Animal` class and override the `speak()` method in the `Dog` class.\n```python\nclass Animal:\n    def speak(self):\n        print(\"Animal speaks\")\nclass Dog(___):\n    def speak(self):\n        print(\"Woof!\")\n```",
    "answer": "Animal",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is method overriding in inheritance?",
    "options": [
      "When a subclass modifies a method of the parent class with its own implementation.",
      "When a subclass calls a method from the parent class.",
      "When a subclass adds new methods to the parent class."
    ],
    "answer": "When a subclass modifies a method of the parent class with its own implementation.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its parent class.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a correct statement for method overriding in inheritance.",
    "options": ["`Dog`", "`Animal`", "`speak`", "`speak()`", "`def`", "`overrides`"],
    "answer": ["`Dog overrides speak() of Animal`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nclass Parent:\n    def greet(self):\n        print(\"Hello from Parent\")\nclass Child(Parent):\n    def greet(self):\n        print(\"Hello from Child\")\nchild_instance = Child()\nchild_instance.greet()\n```",
    "options": [
      "`Hello from Parent`",
      "`Hello from Child`",
      "`Error: greet() is not defined`"
    ],
    "answer": "`Hello from Child`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`vehicle.honk()`", "match": "`Vehicle horn`" },
      { "term": "`car.honk()`", "match": "`Car horn`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid use cases for method overriding? (Select all that apply)",
    "options": [
      "When the subclass needs to change the behavior of a method inherited from the parent class.",
      "When the parent class method is abstract and must be implemented in the subclass.",
      "When a subclass does not need to modify the behavior of a method from the parent class."
    ],
    "answer": [
      "When the subclass needs to change the behavior of a method inherited from the parent class.",
      "When the parent class method is abstract and must be implemented in the subclass."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to use method overriding in inheritance:",
    "options": [
      "Create a method in the parent class.",
      "Create a subclass that inherits from the parent class.",
      "Override the parent class method in the subclass.",
      "Create an object of the subclass.",
      "Call the overridden method."
    ],
    "correctOrder": [
      "Create a method in the parent class.",
      "Create a subclass that inherits from the parent class.",
      "Override the parent class method in the subclass.",
      "Create an object of the subclass.",
      "Call the overridden method."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nclass Shape:\n    def area(self):\n        return 0\nclass Circle(Shape):\n    def area(self):\n        return 3.14 * radius ** 2\ncircle = Circle()\nprint(circle.area())\n```",
    "options": [
      "`radius` is not defined.",
      "The `area()` method of `Shape` should be called.",
      "Inheritance is not correctly applied."
    ],
    "answer": "`radius` is not defined.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a `Cat` class that inherits from `Animal` and overrides the `speak()` method to print \"Meow!\".\n```python\nclass Animal:\n    def speak(self):\n        print(\"Animal speaks\")\nclass Cat(___):\n    def speak(self):\n        print(\"Meow!\")\ncat = Cat()\ncat.speak()\n```",
    "answer": "Animal",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Understanding self and super()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to correctly call the parent class’s `__init__()` method using `super()`.\n```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        ___(self, name)\n        self.breed = breed\n```",
    "answer": "super().__init__",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What does the `self` keyword refer to in a class?",
    "options": [
      "A reference to the current class.",
      "A reference to the instance of the class.",
      "A reference to the parent class."
    ],
    "answer": "A reference to the instance of the class.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `super()` function is used to refer to the parent class and allows you to call its methods.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a correct Python statement for using `super()` to call the parent class method.",
    "options": ["`super`", "`__init__`", "`Dog`", "`self`"],
    "answer": ["`super().__init__(self)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed\ndog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(dog.name)\nprint(dog.breed)\n```",
    "options": [
      "`Buddy Golden Retriever`",
      "`Buddy Golden`",
      "`Golden Retriever Buddy`"
    ],
    "answer": "`Buddy Golden Retriever`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`child.greet()`", "match": "`Hello from Child`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are correct about the `self` keyword? (Select all that apply)",
    "options": [
      "`self` is used to represent the instance of the class.",
      "`self` refers to the class itself.",
      "`self` is required as the first parameter in instance methods."
    ],
    "answer": [
      "`self` is used to represent the instance of the class.",
      "`self` is required as the first parameter in instance methods."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to properly use `super()` in a class:",
    "options": [
      "Create a class that inherits from a parent class.",
      "Define the `__init__()` method in the child class.",
      "Use `super().__init__()` to call the parent class’s `__init__()` method.",
      "Create an instance of the child class."
    ],
    "correctOrder": [
      "Create a class that inherits from a parent class.",
      "Define the `__init__()` method in the child class.",
      "Use `super().__init__()` to call the parent class’s `__init__()` method.",
      "Create an instance of the child class."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code?\n```python\nclass Parent:\n    def __init__(self, name):\n        self.name = name\nclass Child(Parent):\n    def __init__(self):\n        self.name = \"John\"\nchild = Child()\nprint(child.name)\n```",
    "options": [
      "The `Parent` class’s `__init__()` method is not called in `Child`.",
      "`Child` class should define a `__init__()` method.",
      "The `Child` class is not inheriting from `Parent`."
    ],
    "answer": "The `Parent` class’s `__init__()` method is not called in `Child`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to call the parent class’s `__init__()` method using `super()` and print the name.\n```python\nclass Person:\n    def __init__(self, name):\n        self.name = name\nclass Employee(Person):\n    def __init__(self, name, role):\n        super().__init__(name)\n        self.role = role\nemployee = Employee(\"Alice\", \"Manager\")\nprint(employee.___ )\n```",
    "answer": "name",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Encapsulation and private members (using _ and __)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a private variable in a class.\n```python\nclass Person:\n    def __init__(self, name):\n        ___name = name  # Make 'name' private\n```",
    "answer": "self.__name",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following indicates a private member in Python?",
    "options": [
      "`__variable`",
      "`_variable`",
      "`variable`"
    ],
    "answer": "`__variable`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "In Python, private members (indicated by double underscores) can be accessed directly outside the class.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid Python class with private members.",
    "options": ["`__name`", "`Person`", "`class`", "`def __init__(self)`", "`self`"],
    "answer": ["`class Person:`", "`    def __init__(self, name):`", "`        self.__name = name`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nclass Car:\n    def __init__(self, model):\n        self.__model = model\ncar = Car(\"Tesla\")\nprint(car.__model)\n```",
    "options": [
      "`Tesla`",
      "`Error: __model is private`",
      "`None`"
    ],
    "answer": "`Error: __model is private`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`print(john.__name)`", "match": "`Error: __name is private`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are ways to protect class members in Python? (Select all that apply)",
    "options": [
      "Using double underscores (`__`) to indicate a private member.",
      "Using single underscores (`_`) to indicate a protected member.",
      "Using no underscores, as Python has no concept of private members."
    ],
    "answer": [
      "Using double underscores (`__`) to indicate a private member.",
      "Using single underscores (`_`) to indicate a protected member."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to properly use encapsulation in Python:",
    "options": [
      "Define a class.",
      "Mark the variables as private with double underscores (`__`).",
      "Define methods to access or modify private variables (using getters/setters).",
      "Access private variables through these methods."
    ],
    "correctOrder": [
      "Define a class.",
      "Mark the variables as private with double underscores (`__`).",
      "Define methods to access or modify private variables (using getters/setters).",
      "Access private variables through these methods."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nclass Book:\n    def __init__(self, title):\n        self.__title = title\nbook = Book(\"Python Basics\")\nprint(book.__title)\n```",
    "options": [
      "Private members can't be accessed outside the class directly.",
      "The variable `title` is misspelled.",
      "The class name should be `book`."
    ],
    "answer": "Private members can't be accessed outside the class directly.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a method that returns the private `__age` variable.\n```python\nclass Person:\n    def __init__(self, age):\n        self.__age = age\n    def ___(self):\n        return self.__age\nperson = Person(30)\nprint(person.get_age())\n```",
    "answer": "get_age",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "15. Modules and Packages",
        "subtopics": [
          {
            "subtopic": "Importing standard Python modules: math, os, random, etc.",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to import the `math` module and use the `sqrt()` function to calculate the square root of 25.\n```python\n_____ math\nresult = math.sqrt(25)\nprint(result)\n```",
    "answer": "import",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following imports the `random` module correctly in Python?",
    "options": [
      "`import random`",
      "`import random()`",
      "`import random as r`"
    ],
    "answer": "`import random`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "You can use `math` module functions like `sqrt()` and `sin()` without importing the module first.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that imports the `os` module.",
    "options": ["`import`", "`os`"],
    "answer": ["`import os`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nimport random\nprint(random.randint(1, 10))\n```",
    "options": [
      "A random number between 1 and 10",
      "A random string",
      "A syntax error"
    ],
    "answer": "A random number between 1 and 10",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`import os`", "match": "The operating system module" },
      { "term": "`print(os.getcwd())`", "match": "The current working directory path" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid imports for the `math` module? (Select all that apply)",
    "options": [
      "`import math`",
      "`import math.sqrt()`",
      "`from math import sqrt`"
    ],
    "answer": [
      "`import math`",
      "`from math import sqrt`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to use the `random` module to generate a random integer between 1 and 100:",
    "options": [
      "Use `import random` to import the module.",
      "Call the `random.randint(1, 100)` function.",
      "Print the result."
    ],
    "correctOrder": [
      "Use `import random` to import the module.",
      "Call the `random.randint(1, 100)` function.",
      "Print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nfrom random import randint\nprint(random.randint(1, 10))\n```",
    "options": [
      "You need to use `randint` directly after importing it.",
      "`random` should be used instead of `randint`.",
      "You cannot use `print()` with `randint`."
    ],
    "answer": "You need to use `randint` directly after importing it.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to import the `os` module and print the name of the operating system.\n```python\n_____ os\nprint(os.name)\n```",
    "answer": "import",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Writing and importing custom modules",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to import a custom module called `mymodule`.\n```python\n_____ mymodule\n```",
    "answer": "import",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct way to import a function `greet()` from a custom module `mymodule`?",
    "options": [
      "`import mymodule.greet()`",
      "`from mymodule import greet`",
      "`import greet from mymodule`"
    ],
    "answer": "`from mymodule import greet`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "You can import custom modules in Python the same way as standard modules using `import` or `from ... import ...`.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that imports a custom module `mymodule`.",
    "options": ["`import`", "`mymodule`"],
    "answer": ["`import mymodule`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\n# mymodule.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n# main.py\nfrom mymodule import greet\nprint(greet(\"Alice\"))\n```",
    "options": [
      "`Hello, Alice!`",
      "`Hello, Bob!`",
      "`Hello, Alice`"
    ],
    "answer": "`Hello, Alice!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`def square(x): return x * x`", "match": "`square(4)`" },
      { "term": "`print(square(4))`", "match": "`16`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to use custom modules in Python? (Select all that apply)",
    "options": [
      "`import mymodule`",
      "`from mymodule import greet`",
      "`from greet import mymodule`"
    ],
    "answer": [
      "`import mymodule`",
      "`from mymodule import greet`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to create and import a custom module to calculate the square of a number:",
    "options": [
      "Write a function `square(x)` in a file called `mymodule.py`.",
      "Use `from mymodule import square` in your main script.",
      "Call `square(x)` to calculate the square of a number."
    ],
    "correctOrder": [
      "Write a function `square(x)` in a file called `mymodule.py`.",
      "Use `from mymodule import square` in your main script.",
      "Call `square(x)` to calculate the square of a number."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nimport mymodule\nmymodule.greet(\"Bob\")\n```",
    "options": [
      "The `greet()` function is not being used correctly.",
      "The `mymodule` should be imported with `from mymodule import greet`.",
      "`greet()` needs parentheses."
    ],
    "answer": "The `mymodule` should be imported with `from mymodule import greet`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to import a custom module called `mymodule` and call a function `add_numbers()`.\n```python\n_____ mymodule\nresult = mymodule.add_numbers(2, 3)\nprint(result)\n```",
    "answer": "import",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Using packages: understanding the __init__.py file",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to import a module `mymodule` from a package `mypackage`.\n```python\nfrom mypackage _____ mymodule\n```",
    "answer": "import",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the purpose of the `__init__.py` file in a package?",
    "options": [
      "To define a Python function",
      "To mark a directory as a Python package",
      "To import all modules in the directory automatically"
    ],
    "answer": "To mark a directory as a Python package",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `__init__.py` file is required to create a Python package.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create the correct statement to create a package with `mypackage`:",
    "options": ["`__init__`", "`mypackage`", "`.py`", "`file`"],
    "answer": ["`__init__.py file`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output if the `mypackage` contains an `__init__.py` file and a module `greet.py`?\n```python\n# mypackage/__init__.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n# main.py\nfrom mypackage import greet\nprint(greet(\"Alice\"))\n```",
    "options": [
      "`Hello, Alice!`",
      "`Hello, Alice`",
      "`greet('Alice')`"
    ],
    "answer": "`Hello, Alice!`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`def multiply(x, y): return x * y`", "match": "`multiply(3, 5)`" },
      { "term": "`print(multiply(3, 5))`", "match": "`15`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid ways to structure a Python package? (Select all that apply)",
    "options": [
      "A directory containing modules and an `__init__.py` file",
      "A directory containing only an `__init__.py` file",
      "A directory containing subdirectories, each with their own `__init__.py` file"
    ],
    "answer": [
      "A directory containing modules and an `__init__.py` file",
      "A directory containing subdirectories, each with their own `__init__.py` file"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to create and use a package in Python:",
    "options": [
      "Create a directory `mypackage` with a file `__init__.py` and other modules.",
      "Write your functions or classes inside the modules in the `mypackage` directory.",
      "Import the package and use its modules."
    ],
    "correctOrder": [
      "Create a directory `mypackage` with a file `__init__.py` and other modules.",
      "Write your functions or classes inside the modules in the `mypackage` directory.",
      "Import the package and use its modules."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\n# main.py\nimport mypackage\nmypackage.greet(\"Bob\")\n```",
    "options": [
      "`mypackage.greet` is incorrect syntax.",
      "The package does not need the `__init__.py` file.",
      "The `greet()` function needs to be imported directly."
    ],
    "answer": "The `greet()` function needs to be imported directly.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to import the `multiply()` function from the `mypackage` and use it in your script.\n```python\nfrom _____ import multiply\nresult = multiply(4, 5)\nprint(result)\n```",
    "answer": "mypackage",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Installing external packages using pip",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to install the `requests` package using pip in the terminal.\n```bash\npip _____ requests\n```",
    "answer": "install",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct command to install a package named `numpy` using pip?",
    "options": [
      "`pip get numpy`",
      "`pip add numpy`",
      "`pip install numpy`"
    ],
    "answer": "`pip install numpy`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The command `pip uninstall numpy` will remove the `numpy` package from your Python environment.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the command to install the `pandas` package using pip:",
    "options": ["`install`", "`pip`", "`pandas`"],
    "answer": ["`pip install pandas`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What is the output of the following command in the terminal if the `requests` package is installed?\n```bash\npip show requests\n```",
    "options": [
      "Displays information about the `requests` package.",
      "Installs the `requests` package.",
      "Removes the `requests` package."
    ],
    "answer": "Displays information about the `requests` package.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the pip command to its description:",
    "options": [
      { "term": "`pip install requests`", "match": "Installs the `requests` package" },
      { "term": "`pip freeze`", "match": "Lists all installed packages and their versions" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following commands will show a list of all installed packages in your environment? (Select all that apply)",
    "options": [
      "`pip list`",
      "`pip freeze`",
      "`pip show`"
    ],
    "answer": [
      "`pip list`",
      "`pip freeze`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to install an external package using pip:",
    "options": [
      "Open the terminal or command prompt",
      "Type the pip command to install the package (e.g., `pip install package_name`)",
      "Press Enter"
    ],
    "correctOrder": [
      "Open the terminal or command prompt",
      "Type the pip command to install the package (e.g., `pip install package_name`)",
      "Press Enter"
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following pip command?\n```bash\npip installs numpy\n```",
    "options": [
      "`installs` is not a valid pip command.",
      "`pip install` should be written as `pip setup`.",
      "`pip` does not support installing packages."
    ],
    "answer": "`installs` is not a valid pip command.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the command to uninstall the `matplotlib` package using pip.\n```bash\npip _____ matplotlib\n```",
    "answer": "uninstall",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "16. Working with Libraries",
        "subtopics": [
          {
            "subtopic": "Math Library: Basic mathematical functions like sqrt(), pow(), sin()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to find the square root of 16 using the `math` library in Python.\n```python\nimport math\nresult = math.____(16)\n```",
    "answer": "sqrt",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following functions is used to calculate the square of a number in the `math` library?",
    "options": [
      "`math.square()`",
      "`math.pow()`",
      "`math.sqrt()`"
    ],
    "answer": "`math.pow()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `math.sin()` function returns the sine of an angle in radians.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the function to calculate the square root of 25 using the `math` library:",
    "options": ["`math`", "`sqrt`", "`25`"],
    "answer": ["`math.sqrt(25)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nimport math\nresult = math.pow(3, 2)\nprint(result)\n```",
    "options": [
      "`6`",
      "`9`",
      "`27`"
    ],
    "answer": "`9`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the math function with its description:",
    "options": [
      { "term": "`math.sqrt()`", "match": "Returns the square root of a number." },
      { "term": "`math.pow()`", "match": "Raises the first argument to the power of the second argument." },
      { "term": "`math.sin()`", "match": "Calculates the sine of an angle (in radians)." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following functions are available in the `math` library? (Select all that apply)",
    "options": [
      "`math.sqrt()`",
      "`math.pow()`",
      "`math.sin()`",
      "`math.add()`"
    ],
    "answer": [
      "`math.sqrt()`",
      "`math.pow()`",
      "`math.sin()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to find the square root of a number using the `math` library:",
    "options": [
      "Import the `math` library.",
      "Use `math.sqrt()` with the number.",
      "Print the result."
    ],
    "correctOrder": [
      "Import the `math` library.",
      "Use `math.sqrt()` with the number.",
      "Print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nimport math\nresult = math.sqrt(25, 5)\n```",
    "options": [
      "The `sqrt()` function only takes one argument.",
      "The `sqrt()` function does not exist in the `math` library.",
      "The `sqrt()` function is used incorrectly."
    ],
    "answer": "The `sqrt()` function only takes one argument.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to calculate the power of 2 raised to 3 using the `math` library.\n```python\nimport math\nresult = math.____(2, 3)\n```",
    "answer": "pow",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Random Library: Generating random numbers, selecting random elements",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to generate a random integer between 1 and 10 using the `random` library in Python.\n```python\nimport random\nresult = random.____(1, 10)\n```",
    "answer": "randint",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following functions from the `random` library can be used to randomly select an item from a list?",
    "options": [
      "`random.choice()`",
      "`random.random()`",
      "`random.randint()`"
    ],
    "answer": "`random.choice()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `random.random()` function generates a random float between 0 and 1.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the function to generate a random floating-point number between 0 and 1 using the `random` library:",
    "options": ["`random`", "`random`", "`()`"],
    "answer": ["`random.random()`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nimport random\nresult = random.choice([1, 2, 3, 4, 5])\nprint(result)\n```",
    "options": [
      "A random number between 1 and 5",
      "A random string",
      "A random element from the list"
    ],
    "answer": "A random element from the list",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the random function with its description:",
    "options": [
      { "term": "`random.randint()`", "match": "Returns a random integer between the two specified values." },
      { "term": "`random.random()`", "match": "Returns a random floating-point number between 0 and 1." },
      { "term": "`random.choice()`", "match": "Selects a random item from a non-empty sequence." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following functions are part of the `random` library? (Select all that apply)",
    "options": [
      "`random.choice()`",
      "`random.seed()`",
      "`random.sample()`",
      "`random.list()`"
    ],
    "answer": [
      "`random.choice()`",
      "`random.seed()`",
      "`random.sample()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to generate a random number between 1 and 100 using the `random` library:",
    "options": [
      "Import the `random` library.",
      "Call `random.randint(1, 100)` to get a random integer between 1 and 100.",
      "Print the result."
    ],
    "correctOrder": [
      "Import the `random` library.",
      "Call `random.randint(1, 100)` to get a random integer between 1 and 100.",
      "Print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nimport random\nresult = random(1, 10)\n```",
    "options": [
      "The `random()` function does not exist.",
      "The `random` module is not imported.",
      "The function `random.randint()` should be used instead."
    ],
    "answer": "The `random()` function does not exist.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to randomly select an element from the list `[10, 20, 30, 40]` using the `random` library:\n```python\nimport random\nresult = random.____([10, 20, 30, 40])\n```",
    "answer": "choice",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "OS Library: Working with file systems, directories, and environment variables",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to get the current working directory using the `os` library in Python.\n```python\nimport os\ncurrent_directory = os.____()\n```",
    "answer": "getcwd",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which function from the `os` library can be used to change the current working directory?",
    "options": [
      "`os.chdir()`",
      "`os.getcwd()`",
      "`os.mkdir()`"
    ],
    "answer": "`os.chdir()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `os.path.exists()` function checks if a file or directory exists at a specified path.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that creates a new directory called \"new_folder\" using the `os` library:",
    "options": ["`os`", "`mkdir`", "`new_folder`", "`()`"],
    "answer": ["`os.mkdir(\"new_folder\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code do?\n```python\nimport os\nos.remove(\"file.txt\")\n```",
    "options": [
      "Removes a directory named \"file.txt\"",
      "Removes a file named \"file.txt\"",
      "Creates a file named \"file.txt\""
    ],
    "answer": "Removes a file named \"file.txt\"",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the function from the `os` library with its description:",
    "options": [
      { "term": "`os.remove()`", "match": "Deletes a file." },
      { "term": "`os.mkdir()`", "match": "Creates a directory." },
      { "term": "`os.environ()`", "match": "Retrieves environment variables." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following functions are part of the `os` library? (Select all that apply)",
    "options": [
      "`os.environ()`",
      "`os.path.exists()`",
      "`os.rename()`",
      "`os.find()`"
    ],
    "answer": [
      "`os.environ()`",
      "`os.path.exists()`",
      "`os.rename()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to list the files in the current directory using the `os` library:",
    "options": [
      "Import the `os` library.",
      "Use `os.listdir()` to get the list of files and directories.",
      "Print the result."
    ],
    "correctOrder": [
      "Import the `os` library.",
      "Use `os.listdir()` to get the list of files and directories.",
      "Print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Python code?\n```python\nimport os\nos.make_directory(\"new_folder\")\n```",
    "options": [
      "The function `os.make_directory()` does not exist.",
      "The correct function is `os.mkdir()`.",
      "The argument is not a valid directory name."
    ],
    "answer": "The function `os.make_directory()` does not exist.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to get the value of the environment variable `HOME` using the `os` library:\n```python\nimport os\nhome_directory = os.____(\"HOME\")\n```",
    "answer": "environ.get",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      }
    ]
  },
  {
    "phase": "Phase 4: Working with Data and Basic Algorithms",
    "topics": [
      {
        "topic": "17. Data Structures: Stacks, Queues, and Linked Lists",
        "subtopics": [
          {
            "subtopic": "Implementing stacks using lists",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to implement a stack using a Python list. Push the element `5` onto the stack.\n```python\nstack = []\nstack.___ (5)\n```",
    "answer": "append",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following operations is used to remove an element from the top of a stack in Python?",
    "options": [
      "`pop()`",
      "`remove()`",
      "`append()`"
    ],
    "answer": "`pop()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A stack in Python follows the \"First In, Last Out\" (FILO) principle.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python code that pushes an element `10` onto the stack:",
    "options": ["`stack`", "`append()`", "`10`"],
    "answer": ["`stack.append(10)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nstack = [1, 2, 3]\nstack.append(4)\nstack.pop()\nprint(stack)\n```",
    "options": [
      "`[1, 2, 3]`",
      "`[1, 2, 3, 4]`",
      "`[1, 2, 3, 4, 3]`"
    ],
    "answer": "`[1, 2, 3]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`stack = [10, 20, 30]`", "match": "`[10, 20, 30]`" },
      { "term": "`stack.pop()`", "match": "`30`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods can be used to simulate stack operations in Python? (Select all that apply)",
    "options": [
      "`append()`",
      "`pop()`",
      "`insert()`"
    ],
    "answer": [
      "`append()`",
      "`pop()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps in the correct order to use a stack in Python:",
    "options": [
      "Create an empty list for the stack.",
      "Use `append()` to add elements to the stack.",
      "Use `pop()` to remove elements from the stack.",
      "Print the stack."
    ],
    "correctOrder": [
      "Create an empty list for the stack.",
      "Use `append()` to add elements to the stack.",
      "Use `pop()` to remove elements from the stack.",
      "Print the stack."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code for implementing a stack?\n```python\nstack = [10, 20, 30]\nstack.pop()\nstack.pop(0)\nprint(stack)\n```",
    "options": [
      "`pop()` should not have any argument.",
      "The stack should be initialized with `append()`.",
      "The `pop(0)` method is correct for removing the top element."
    ],
    "answer": "`pop()` should not have any argument.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to simulate a stack with the following operations: push `100`, pop the top element, and then print the stack.\n```python\nstack = []\nstack.___ (100)  # Push 100\nstack.___ ()     # Pop the top element\nprint(stack)\n```",
    "answer": "`append`, `pop`",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Implementing queues with deque from the collections module",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to implement a queue using `deque` from the `collections` module. Enqueue the element `10` to the queue.\n```python\nfrom collections import deque\nqueue = deque()\nqueue.___ (10)\n```",
    "answer": "append",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following methods is used to remove an element from the front of the queue in Python using `deque`?",
    "options": [
      "`pop()`",
      "`remove()`",
      "`popleft()`"
    ],
    "answer": "`popleft()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A queue follows the \"First In, First Out\" (FIFO) principle in Python.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python code that enqueues the element `15` to the queue:",
    "options": ["`queue`", "`append()`", "`15`"],
    "answer": ["`queue.append(15)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nfrom collections import deque\nqueue = deque([1, 2, 3])\nqueue.append(4)\nqueue.popleft()\nprint(queue)\n```",
    "options": [
      "`[2, 3, 4]`",
      "`[1, 2, 3]`",
      "`[1, 2, 3, 4]`"
    ],
    "answer": "`[2, 3, 4]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`queue = deque([10, 20])`", "match": "`[10, 20]`" },
      { "term": "`queue.popleft()`", "match": "`10`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following methods can be used to simulate queue operations in Python using `deque`? (Select all that apply)",
    "options": [
      "`append()`",
      "`pop()`",
      "`popleft()`"
    ],
    "answer": [
      "`append()`",
      "`popleft()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the following steps in the correct order to use a queue with `deque`:",
    "options": [
      "Create a queue using `deque()`.",
      "Use `append()` to enqueue elements.",
      "Use `popleft()` to dequeue elements.",
      "Print the queue."
    ],
    "correctOrder": [
      "Create a queue using `deque()`.",
      "Use `append()` to enqueue elements.",
      "Use `popleft()` to dequeue elements.",
      "Print the queue."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following Python code for implementing a queue using `deque`?\n```python\nfrom collections import deque\nqueue = deque([10, 20, 30])\nqueue.pop(0)\nprint(queue)\n```",
    "options": [
      "`pop(0)` is not the correct method for deque, it should be `popleft()`.",
      "The queue should be initialized with `append()`.",
      "`pop(0)` is the correct method to dequeue an element."
    ],
    "answer": "`pop(0)` is not the correct method for deque, it should be `popleft()`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to simulate a queue with the following operations: enqueue `25`, dequeue the front element, and then print the queue.\n```python\nfrom collections import deque\nqueue = deque()\nqueue.___ (25)     # Enqueue 25\nqueue.___ ()       # Dequeue the front element\nprint(queue)\n```",
    "answer": "`append`, `popleft`",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Simple linked lists (for understanding)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to define a simple linked list node class with a value and a next node reference.\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.___ = None\n```",
    "answer": "next",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the purpose of the `next` attribute in a linked list node?",
    "options": [
      "It stores the value of the node.",
      "It links the current node to the next node in the list.",
      "It stores a reference to the previous node."
    ],
    "answer": "It links the current node to the next node in the list.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "A simple linked list consists of nodes where each node contains a value and a reference to the next node.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a class definition for a linked list node that holds a value and the reference to the next node:",
    "options": ["`Node`", "`self.value`", "`self.next = None`", "`def __init__(self, value)`"],
    "answer": ["`def __init__(self, value):`", "`self.value = value`", "`self.next = None`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nnode1 = Node(10)\nnode2 = Node(20)\nnode1.next = node2\nprint(node1.next.value)\n```",
    "options": [
      "`10`",
      "`None`",
      "`20`"
    ],
    "answer": "`20`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the code with its output:",
    "options": [
      { "term": "`node1 = Node(10)`", "match": "`10`" },
      { "term": "`node1.next = Node(20)`", "match": "`20`" }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are true about a simple linked list? (Select all that apply)",
    "options": [
      "A linked list is a collection of nodes.",
      "Each node contains a value and a reference to the previous node.",
      "A linked list can be traversed starting from the first node."
    ],
    "answer": [
      "A linked list is a collection of nodes.",
      "A linked list can be traversed starting from the first node."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create a simple linked list:",
    "options": [
      "Create a class `Node` with a `value` and a `next` attribute.",
      "Create a node instance with a value.",
      "Link nodes by setting the `next` attribute of one node to another.",
      "Access the value of the next node."
    ],
    "correctOrder": [
      "Create a class `Node` with a `value` and a `next` attribute.",
      "Create a node instance with a value.",
      "Link nodes by setting the `next` attribute of one node to another.",
      "Access the value of the next node."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code for implementing a linked list node?\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nnode1 = Node(10)\nnode2 = Node(20)\nnode1.next = node2\nprint(node2.value)\n```",
    "options": [
      "The `next` attribute of `node1` is set incorrectly.",
      "There is no issue with this code.",
      "The value of `node1` should be printed instead."
    ],
    "answer": "There is no issue with this code.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to create a simple linked list with two nodes: `10` and `20`, and print the value of the second node.\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nnode1 = Node(10)\nnode2 = Node(20)\nnode1.___ = node2  # Link node1 to node2\nprint(node1.next.value)\n```",
    "answer": "next",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "18. Sorting and Searching Algorithms",
        "subtopics": [
          {
            "subtopic": "Understanding basic sorting algorithms: Bubble sort, Insertion sort, Merge sort",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to correctly implement a basic bubble sort algorithm.\n```python\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(____):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "answer": "len(arr) - i - 1",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which sorting algorithm repeatedly compares adjacent elements and swaps them if they are in the wrong order, until the list is sorted?",
    "options": [
      "Merge sort",
      "Insertion sort",
      "Bubble sort"
    ],
    "answer": "Bubble sort",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Merge sort is an example of a divide and conquer algorithm.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to define a sorting algorithm that repeatedly inserts elements into their correct position.",
    "options": ["`Insertion`", "`correct`", "`elements`", "`sorted`", "`the`", "`into`", "`position`", "`repeatedly`"],
    "answer": ["`Insertion sort repeatedly inserts elements into their correct position in the sorted part of the list.`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output after applying bubble sort on the list?\n```python\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\narr = [5, 2, 9, 1, 5, 6]\nbubble_sort(arr)\nprint(arr)\n```",
    "options": [
      "`[1, 2, 5, 5, 6, 9]`",
      "`[9, 6, 5, 5, 2, 1]`",
      "`[1, 5, 6, 2, 9, 5]`"
    ],
    "answer": "`[1, 2, 5, 5, 6, 9]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the sorting algorithm with its description:",
    "options": [
      { "term": "Bubble sort", "match": "Compares adjacent elements and swaps them until sorted." },
      { "term": "Merge sort", "match": "Divides the list into two halves, sorts them, and then merges them." },
      { "term": "Insertion sort", "match": "Repeatedly inserts elements into their correct position in the sorted part of the list." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are true about the bubble sort algorithm? (Select all that apply)",
    "options": [
      "Bubble sort is a comparison-based sorting algorithm.",
      "Bubble sort always sorts the list in the first pass.",
      "Bubble sort has a time complexity of O(n^2) in the worst case."
    ],
    "answer": [
      "Bubble sort is a comparison-based sorting algorithm.",
      "Bubble sort has a time complexity of O(n^2) in the worst case."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order for the merge sort algorithm:",
    "options": [
      "Split the list into two halves.",
      "Sort each half recursively.",
      "Merge the sorted halves into a single sorted list."
    ],
    "correctOrder": [
      "Split the list into two halves.",
      "Sort each half recursively.",
      "Merge the sorted halves into a single sorted list."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this bubble sort implementation?\n```python\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "options": [
      "The second loop should iterate until `len(arr) - i - 1`.",
      "The first loop should iterate in reverse order.",
      "The comparison inside the loop is incorrect."
    ],
    "answer": "The second loop should iterate until `len(arr) - i - 1`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to implement the insertion sort algorithm.\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n```",
    "answer": "The provided code is correct as it is.",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Searching algorithms: Linear search, Binary search",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to implement a linear search algorithm in Python.\n```python\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == ___:\n            return i\n    return -1\n```",
    "answer": "target",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which search algorithm is used to find an element by checking each element in a list sequentially?",
    "options": [
      "Binary search",
      "Linear search",
      "Jump search"
    ],
    "answer": "Linear search",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "Binary search can only be used on a sorted list.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to define a search algorithm that works by dividing the list into two halves and repeatedly narrowing down the search space.",
    "options": ["`divide`", "`search`", "`halves`", "`binary`", "`repeatedly`", "`list`"],
    "answer": ["`Binary search divides the list into two halves and repeatedly narrows down the search space.`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output after performing binary search on a sorted list?\n```python\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\narr = [1, 3, 5, 7, 9, 11]\nresult = binary_search(arr, 7)\nprint(result)\n```",
    "options": [
      "`2`",
      "`3`",
      "`1`"
    ],
    "answer": "`3`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the search algorithm with its description:",
    "options": [
      { "term": "Linear search", "match": "Searches by checking each element in the list one by one." },
      { "term": "Binary search", "match": "Searches by repeatedly dividing the sorted list in half." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are true about binary search? (Select all that apply)",
    "options": [
      "It can only be applied to sorted lists.",
      "It has a time complexity of O(n).",
      "It has a time complexity of O(log n)."
    ],
    "answer": [
      "It can only be applied to sorted lists.",
      "It has a time complexity of O(log n)."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to perform a binary search:",
    "options": [
      "Set the low and high pointers to the start and end of the list.",
      "Compare the middle element with the target.",
      "Narrow the search range based on the comparison (adjust `low` or `high`).",
      "Repeat until the target is found or the search range is exhausted."
    ],
    "correctOrder": [
      "Set the low and high pointers to the start and end of the list.",
      "Compare the middle element with the target.",
      "Narrow the search range based on the comparison (adjust `low` or `high`).",
      "Repeat until the target is found or the search range is exhausted."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this binary search implementation?\n```python\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr)\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```",
    "options": [
      "`high` should be `len(arr) - 1` instead of `len(arr)`.",
      "The condition `low <= high` should be `low < high`.",
      "The `mid` calculation is incorrect."
    ],
    "answer": "`high` should be `len(arr) - 1` instead of `len(arr)`.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the binary search code to return the index of the target if found:\n```python\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return ___\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```",
    "answer": "mid",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Built-in functions: sorted(), min(), max(), sum()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to find the largest number in the list using a built-in function.\n```python\nnumbers = [10, 20, 30, 40]\nresult = max(___) \nprint(result)\n```",
    "answer": "numbers",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which built-in function would you use to calculate the sum of a list of numbers?",
    "options": [
      "`max()`",
      "`sum()`",
      "`sorted()`"
    ],
    "answer": "`sum()`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `sorted()` function in Python returns a new list without modifying the original list.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that finds the minimum value in a list.",
    "options": ["`min`", "`numbers`", "`find`", "`the`"],
    "answer": ["`min(numbers)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Python code output?\n```python\nnumbers = [5, 1, 3, 9, 7]\nresult = sorted(numbers)\nprint(result)\n```",
    "options": [
      "`[5, 1, 3, 9, 7]`",
      "`[1, 3, 5, 7, 9]`",
      "`5`"
    ],
    "answer": "`[1, 3, 5, 7, 9]`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the built-in function with its purpose:",
    "options": [
      { "term": "`sorted()`", "match": "Returns a new list containing all elements sorted in ascending order." },
      { "term": "`min()`", "match": "Returns the smallest element in an iterable." },
      { "term": "`max()`", "match": "Returns the largest element in an iterable." },
      { "term": "`sum()`", "match": "Returns the sum of all elements in an iterable." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following can be used to calculate the sum of a list of numbers? (Select all that apply)",
    "options": [
      "`min()`",
      "`sum()`",
      "`sorted()`"
    ],
    "answer": [
      "`sum()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to find the largest number and the sum of numbers in a list:",
    "options": [
      "Use `max()` to find the largest number in the list.",
      "Use `sum()` to calculate the sum of the list.",
      "Print the result of both operations."
    ],
    "correctOrder": [
      "Use `max()` to find the largest number in the list.",
      "Use `sum()` to calculate the sum of the list.",
      "Print the result of both operations."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this code for finding the smallest number?\n```python\nnumbers = [15, 3, 9, 27]\nresult = sorted(numbers)\nprint(min)\n```",
    "options": [
      "`sorted()` is incorrectly used for finding the smallest number.",
      "`min` should be called as a function (`min()`), not as a variable.",
      "`min()` is used incorrectly."
    ],
    "answer": "`min` should be called as a function (`min()`), not as a variable.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to calculate the sum of the numbers in the list:\n```python\nnumbers = [1, 2, 3, 4]\nresult = ___(numbers)\nprint(result)\n```",
    "answer": "sum",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      }
    ]
  },
  {
    "phase": "Phase 5: Advanced Beginner Topics",
    "topics": [
      {
        "topic": "19. Basic Regular Expressions",
        "subtopics": [
          {
            "subtopic": "Using the re module for pattern matching",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to match the pattern of a digit (`\\d`) in the string `\"123 abc\"` using the `re` module.\n```python\nimport re\npattern = r\"___\"\nresult = re.findall(pattern, \"123 abc\")\nprint(result)\n```",
    "answer": "\\d",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct way to use the `re` module to search for the pattern `\"abc\"` in the string `\"abcdef\"`?",
    "options": [
      "`re.match(\"abc\", \"abcdef\")`",
      "`re.search(\"abc\", \"abcdef\")`",
      "`re.findall(\"abc\", \"abcdef\")`"
    ],
    "answer": "`re.search(\"abc\", \"abcdef\")`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `re.findall()` function returns a list of all matches of the specified pattern in a string.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that checks if the string `\"123\"` contains a digit pattern.",
    "options": ["`match`", "`re`", "`string`", "`\"123\"`", "`r\"\\d\"`"],
    "answer": ["`re.match(r\"\\d\", \"123\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport re\nresult = re.findall(r\"\\d\", \"abc 123 def 456\")\nprint(result)\n```",
    "options": [
      "`['1', '2', '3', '4', '5', '6']`",
      "`['123', '456']`",
      "`['abc', 'def']`"
    ],
    "answer": "`['1', '2', '3', '4', '5', '6']`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the function from the `re` module with its purpose:",
    "options": [
      { "term": "`re.match()`", "match": "Returns the first match of the pattern in a string." },
      { "term": "`re.search()`", "match": "Searches for the pattern in the entire string and returns the match object." },
      { "term": "`re.findall()`", "match": "Finds all non-overlapping matches of a pattern in a string." },
      { "term": "`re.sub()`", "match": "Substitutes occurrences of a pattern in a string with another string." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following can be used to find all digits in a string using the `re` module? (Select all that apply)",
    "options": [
      "`re.search(r\"\\d\", \"abc123\")`",
      "`re.findall(r\"\\d\", \"abc123\")`",
      "`re.match(r\"\\d\", \"abc123\")`"
    ],
    "answer": [
      "`re.findall(r\"\\d\", \"abc123\")`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to use `re.search()` to find a pattern in a string:",
    "options": [
      "Import the `re` module.",
      "Define the pattern using a regular expression.",
      "Use `re.search()` with the pattern and the string.",
      "Print or process the result."
    ],
    "correctOrder": [
      "Import the `re` module.",
      "Define the pattern using a regular expression.",
      "Use `re.search()` with the pattern and the string.",
      "Print or process the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code to find digits in a string?\n```python\nimport re\nresult = re.match(r\"\\d\", \"abc123\")\nprint(result)\n```",
    "options": [
      "`re.match()` only checks the start of the string, not the entire string.",
      "`re.match()` should be replaced with `re.search()` for this task.",
      "The pattern is incorrect for finding digits."
    ],
    "answer": "`re.match()` only checks the start of the string, not the entire string.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to replace all digits with `#` in the string `\"abc123\"` using the `re.sub()` method.\n```python\nimport re\nresult = re.sub(r\"\\d\", ___, \"abc123\")\nprint(result)\n```",
    "answer": "\"#\"",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Common regex patterns for matching text, digits, and special characters",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to match a digit (`0-9`) in the string `\"abc123def\"` using the `re` module.\n```python\nimport re\npattern = r\"___\"\nresult = re.findall(pattern, \"abc123def\")\nprint(result)\n```",
    "answer": "\\d",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following patterns will match a word containing letters and digits?",
    "options": [
      "`\\w+`",
      "`\\d+`",
      "`[a-zA-Z0-9]`"
    ],
    "answer": "`\\w+`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The pattern `r\"\\s\"` will match any non-whitespace character in a string.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a pattern that matches any whitespace character.",
    "options": ["`\\s`", "`r`"],
    "answer": ["`r\"\\s\"`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport re\nresult = re.findall(r\"\\w+\", \"abc123! def456\")\nprint(result)\n```",
    "options": [
      "`['abc123', 'def456']`",
      "`['abc', '123', 'def', '456']`",
      "`['abc123!', 'def456']`"
    ],
    "answer": "`['abc', '123', 'def', '456']`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the pattern with its description:",
    "options": [
      { "term": "`\\d+`", "match": "Matches one or more digits." },
      { "term": "`\\w+`", "match": "Matches one or more word characters (letters, digits, and underscores)." },
      { "term": "`\\s+`", "match": "Matches one or more whitespace characters (spaces, tabs, newlines)." },
      { "term": "`[a-zA-Z]`", "match": "Matches one or more alphabetic characters (lowercase or uppercase)." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following patterns will match a valid email address (considering basic structure)? (Select all that apply)",
    "options": [
      "`r\"[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]+\"`",
      "`r\"\\d+\"`",
      "`r\"[a-zA-Z]+\\.[a-zA-Z]+\"`"
    ],
    "answer": [
      "`r\"[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]+\"`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to use the `re` module to match digits in a string:",
    "options": [
      "Import the `re` module.",
      "Define the pattern using a regular expression (e.g., `r\"\\d+\"`).",
      "Use `re.findall()` or `re.search()` with the pattern and the string.",
      "Process or print the result."
    ],
    "correctOrder": [
      "Import the `re` module.",
      "Define the pattern using a regular expression (e.g., `r\"\\d+\"`).",
      "Use `re.findall()` or `re.search()` with the pattern and the string.",
      "Process or print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code to find all digits in a string?\n```python\nimport re\nresult = re.findall(r\"\\w\", \"abc123\")\nprint(result)\n```",
    "options": [
      "`\\w` matches word characters, not digits.",
      "The pattern should be `r\"\\d\"` to match digits.",
      "The pattern is correct; it should match both letters and digits."
    ],
    "answer": "`\\w` matches word characters, not digits.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to replace all whitespace characters with `#` in the string `\"abc 123 def\"` using the `re.sub()` method.\n```python\nimport re\nresult = re.sub(r\"___\", \"#\", \"abc 123 def\")\nprint(result)\n```",
    "answer": "\\s",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Searching and replacing text with sub()",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to replace all occurrences of the word \"apple\" with \"orange\" in the string `\"apple banana apple\"` using the `re.sub()` method.\n```python\nimport re\nresult = re.sub(r\"___\", \"orange\", \"apple banana apple\")\nprint(result)\n```",
    "answer": "apple",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport re\nresult = re.sub(r\"\\d\", \"#\", \"abc123def456\")\nprint(result)\n```",
    "options": [
      "`abc###def###`",
      "`abc###def#`",
      "`abc###def456`"
    ],
    "answer": "`abc###def###`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `re.sub()` function can only replace the first match of a pattern in a string.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that replaces digits with `#` in the string `\"abc123xyz456\"` using `re.sub()`.",
    "options": ["`\"abc123xyz456\"`", "`r\"\\d\"`", "`\"#\"`", "`sub`"],
    "answer": ["`re.sub(r\"\\d\", \"#\", \"abc123xyz456\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport re\nresult = re.sub(r\"cat\", \"dog\", \"The cat is on the mat\")\nprint(result)\n```",
    "options": [
      "`The dog is on the dog`",
      "`The dog is on the mat`",
      "`The cat is on the dog`"
    ],
    "answer": "`The dog is on the mat`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the `re.sub()` function with its description:",
    "options": [
      { "term": "`re.sub(r\"\\d\", \"#\", \"abc123\")`", "match": "Replaces all digits with `#`." },
      { "term": "`re.sub(r\"cat\", \"dog\", \"cat in the hat\")`", "match": "Replaces the first occurrence of `\"cat\"` with `\"dog\"`." },
      { "term": "`re.sub(r\"\\s+\", \"-\", \"hello world\")`", "match": "Replaces all consecutive spaces with `-`." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following patterns can be used with `re.sub()` to replace spaces with underscores? (Select all that apply)",
    "options": [
      "`r\"\\s+\"`",
      "`r\" \"`",
      "`r\"\\d\"`"
    ],
    "answer": [
      "`r\"\\s+\"`",
      "`r\" \"`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to use the `re.sub()` function to replace digits with `#` in a string:",
    "options": [
      "Define the pattern (`r\"\\d\"`).",
      "Use `re.sub()` with the pattern and the string.",
      "Import the `re` module.",
      "Process or print the result."
    ],
    "correctOrder": [
      "Import the `re` module.",
      "Define the pattern (`r\"\\d\"`).",
      "Use `re.sub()` with the pattern and the string.",
      "Process or print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code to replace \"dog\" with \"cat\"?\n```python\nimport re\nresult = re.sub(r\"dog\", \"cat\", \"The dog is in the yard\", count=1)\nprint(result)\n```",
    "options": [
      "The `count` parameter should be removed.",
      "The pattern should be `r\"\\bdog\\b\"` to match only the word \"dog\".",
      "There is no issue with the code."
    ],
    "answer": "There is no issue with the code.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to replace all whitespace characters in the string `\"Hello  world  \"` with `-` using `re.sub()`.\n```python\nimport re\nresult = re.sub(r\"___\", \"-\", \"Hello  world  \")\nprint(result)\n```",
    "answer": "\\s",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "20. Debugging and Testing",
        "subtopics": [
          {
            "subtopic": "Print debugging: Using print statements to understand code flow",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to replace all occurrences of the word \"apple\" with \"orange\" in the string `\"apple banana apple\"` using the `re.sub()` method.\n```python\nimport re\nresult = re.sub(r\"___\", \"orange\", \"apple banana apple\")\nprint(result)\n```",
    "answer": "apple",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport re\nresult = re.sub(r\"\\d\", \"#\", \"abc123def456\")\nprint(result)\n```",
    "options": [
      "`abc###def###`",
      "`abc###def#`",
      "`abc###def456`"
    ],
    "answer": "`abc###def###`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `re.sub()` function can only replace the first match of a pattern in a string.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that replaces digits with `#` in the string `\"abc123xyz456\"` using `re.sub()`.",
    "options": ["`\"abc123xyz456\"`", "`r\"\\d\"`", "`\"#\"`", "`sub`"],
    "answer": ["`re.sub(r\"\\d\", \"#\", \"abc123xyz456\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport re\nresult = re.sub(r\"cat\", \"dog\", \"The cat is on the mat\")\nprint(result)\n```",
    "options": [
      "`The dog is on the dog`",
      "`The dog is on the mat`",
      "`The cat is on the dog`"
    ],
    "answer": "`The dog is on the mat`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the `re.sub()` function with its description:",
    "options": [
      { "term": "`re.sub(r\"\\d\", \"#\", \"abc123\")`", "match": "Replaces all digits with `#`." },
      { "term": "`re.sub(r\"cat\", \"dog\", \"cat in the hat\")`", "match": "Replaces the first occurrence of `\"cat\"` with `\"dog\"`." },
      { "term": "`re.sub(r\"\\s+\", \"-\", \"hello world\")`", "match": "Replaces all consecutive spaces with `-`." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following patterns can be used with `re.sub()` to replace spaces with underscores? (Select all that apply)",
    "options": [
      "`r\"\\s+\"`",
      "`r\" \"`",
      "`r\"\\d\"`"
    ],
    "answer": [
      "`r\"\\s+\"`",
      "`r\" \"`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to use the `re.sub()` function to replace digits with `#` in a string:",
    "options": [
      "Define the pattern (`r\"\\d\"`).",
      "Use `re.sub()` with the pattern and the string.",
      "Import the `re` module.",
      "Process or print the result."
    ],
    "correctOrder": [
      "Import the `re` module.",
      "Define the pattern (`r\"\\d\"`).",
      "Use `re.sub()` with the pattern and the string.",
      "Process or print the result."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code to replace \"dog\" with \"cat\"?\n```python\nimport re\nresult = re.sub(r\"dog\", \"cat\", \"The dog is in the yard\", count=1)\nprint(result)\n```",
    "options": [
      "The `count` parameter should be removed.",
      "The pattern should be `r\"\\bdog\\b\"` to match only the word \"dog\".",
      "There is no issue with the code."
    ],
    "answer": "There is no issue with the code.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to replace all whitespace characters in the string `\"Hello  world  \"` with `-` using `re.sub()`.\n```python\nimport re\nresult = re.sub(r\"___\", \"-\", \"Hello  world  \")\nprint(result)\n```",
    "answer": "\\s",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Logging: Using the logging module for structured log messages",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to debug the code using a print statement to display the value of `total` before returning it in the following function:\n```python\ndef calculate_sum(a, b):\n    total = a + b\n    print(___)  # Add a print statement here\n    return total\n```",
    "answer": "total",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What is the purpose of using print statements for debugging?",
    "options": [
      "To change the code's behavior",
      "To understand the flow and values of variables at different stages",
      "To make the code run faster"
    ],
    "answer": "To understand the flow and values of variables at different stages",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "You can use print statements to track the execution flow and inspect variable values during the program's runtime.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a Python statement that prints the value of `x` for debugging:",
    "options": ["`x`", "`print`", "`debug`"],
    "answer": ["`print(x)`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output if `a = 5` and `b = 3`?\n```python\ndef add_numbers(a, b):\n    result = a + b\n    print(\"The result is:\", result)\n    return result\nadd_numbers(5, 3)\n```",
    "options": [
      "`The result is: 53`",
      "`The result is: 8`",
      "`The result is: 5 + 3`"
    ],
    "answer": "`The result is: 8`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the print statement with its purpose in debugging:",
    "options": [
      { "term": "`print(\"Entering function add_numbers\")`", "match": "To track the start of the function execution." },
      { "term": "`print(\"a =\", a, \"b =\", b)`", "match": "To check the values of input variables." },
      { "term": "`print(\"Exiting function add_numbers\")`", "match": "To confirm the function has completed execution." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following statements are valid use cases for print debugging? (Select all that apply)",
    "options": [
      "Displaying the value of variables at different points in the program.",
      "Tracking the function execution flow.",
      "Modifying the values of variables during execution."
    ],
    "answer": [
      "Displaying the value of variables at different points in the program.",
      "Tracking the function execution flow."
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to use print statements for debugging:",
    "options": [
      "Add `print()` statements at various points in the code.",
      "Analyze the output to understand the flow and variable values.",
      "Run the program.",
      "Remove unnecessary print statements once debugging is complete."
    ],
    "correctOrder": [
      "Add `print()` statements at various points in the code.",
      "Run the program.",
      "Analyze the output to understand the flow and variable values.",
      "Remove unnecessary print statements once debugging is complete."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with the following code? It is intended to debug a function by printing the result.\n```python\ndef multiply(a, b):\n    result = a * b\n    debug(result)\n    return result\n```",
    "options": [
      "The function `debug()` is not defined.",
      "The `print()` function should be used instead of `debug()`.",
      "There is no issue with the code."
    ],
    "answer": "The function `debug()` is not defined.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to print the sum of two numbers `x` and `y` for debugging.\n```python\ndef calculate_sum(x, y):\n    total = x + y\n    print(___)  # Add a print statement to debug here\n    return total\n```",
    "answer": "total",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Basic Unit Testing: Writing unit tests using Python’s unittest module",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to log a message at the `INFO` level using the logging module.\n```python\nimport logging\nlogging.____(\"This is an informational message.\")\n```",
    "answer": "info",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following is the correct way to set up logging in Python?",
    "options": [
      "`logging.debug(\"Debugging message\")`",
      "`import logging; logging.basicConfig(level=logging.DEBUG)`",
      "`logging.configure(level=logging.DEBUG)`"
    ],
    "answer": "`import logging; logging.basicConfig(level=logging.DEBUG)`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `logging` module is used to create structured log messages for tracking events and debugging in Python.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create a valid logging statement that logs a message at the `ERROR` level.",
    "options": ["`error`", "`logging`", "`log`", "`critical`"],
    "answer": ["`logging.error(\"log\")`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following code output?\n```python\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info(\"System is running.\")\nlogging.debug(\"This is a debug message.\")\n```",
    "options": [
      "Only `System is running.`",
      "Both `System is running.` and `This is a debug message.`",
      "None of the messages."
    ],
    "answer": "Only `System is running.`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the log level with its description in the `logging` module:",
    "options": [
      { "term": "`DEBUG`", "match": "Used to output low-level information for debugging." },
      { "term": "`INFO`", "match": "Used to output general information about program execution." },
      { "term": "`WARNING`", "match": "Used for messages that indicate potential issues." },
      { "term": "`ERROR`", "match": "Used for errors that need immediate attention." },
      { "term": "`CRITICAL`", "match": "Used for very severe errors that cause the program to terminate." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid log levels in the `logging` module? (Select all that apply)",
    "options": [
      "`logging.error()`",
      "`logging.success()`",
      "`logging.warning()`"
    ],
    "answer": [
      "`logging.error()`",
      "`logging.warning()`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to set up logging and log a message:",
    "options": [
      "Import the `logging` module.",
      "Configure the logging settings with `basicConfig()`.",
      "Log a message with a chosen level (e.g., `logging.info()`).",
      "(Optional) Add a custom log format with `format`."
    ],
    "correctOrder": [
      "Import the `logging` module.",
      "Configure the logging settings with `basicConfig()`.",
      "Log a message with a chosen level (e.g., `logging.info()`).",
      "(Optional) Add a custom log format with `format`."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this logging code?\n```python\nimport logging\nlogging.setup(level=logging.DEBUG)\nlogging.debug(\"This is a debug message.\")\n```",
    "options": [
      "There is no `logging.setup()` method.",
      "`logging.debug()` should be used after `logging.basicConfig()`.",
      "`logging.DEBUG` should be replaced with `logging.DEBUG()`."
    ],
    "answer": "There is no `logging.setup()` method.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to log a critical message using the `logging` module.\n```python\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.____(\"A critical error occurred.\")\n```",
    "answer": "critical",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Running tests and interpreting results",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to run unit tests and see the results in the terminal.\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_addition(self):\n        self.assertEqual(2 + 3, 5)\nif __name__ == '__main__':\n    _______\n```",
    "answer": "unittest.main()",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will happen if a unit test passes in Python's `unittest` module?",
    "options": [
      "Nothing is displayed unless a failure or error occurs.",
      "A message will indicate that the test passed successfully.",
      "The test result will display as `PASSED`."
    ],
    "answer": "Nothing is displayed unless a failure or error occurs.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `unittest` module will display a \"PASS\" message when all tests pass successfully.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to describe a process for running tests using `unittest`.",
    "options": ["`run`", "`tests`", "`main()`", "`unittest`"],
    "answer": ["`unittest.main()`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following unit test code output?\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_subtraction(self):\n        self.assertEqual(5 - 3, 2)\nif __name__ == '__main__':\n    unittest.main()\n```",
    "options": [
      "`Test passed!`",
      "A message showing `.` as the test passed.",
      "The error message from the test."
    ],
    "answer": "A message showing `.` as the test passed.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the test result with its meaning.",
    "options": [
      { "term": "`.`", "match": "The test passed successfully." },
      { "term": "`F`", "match": "A failure occurred during the test." },
      { "term": "`E`", "match": "The test encountered an error during execution." },
      { "term": "`OK`", "match": "All tests passed successfully." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following commands can be used to run tests in the `unittest` module? (Select all that apply)",
    "options": [
      "`python -m unittest`",
      "`python unittest.run()`",
      "`python -m unittest discover`"
    ],
    "answer": [
      "`python -m unittest`",
      "`python -m unittest discover`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps for running tests in Python’s `unittest` module:",
    "options": [
      "Write test methods inside a test class that inherits from `unittest.TestCase`.",
      "Run the tests using `unittest.main()`.",
      "Check the output to ensure the tests passed or failed.",
      "Modify the code if a failure occurs and rerun the tests."
    ],
    "correctOrder": [
      "Write test methods inside a test class that inherits from `unittest.TestCase`.",
      "Run the tests using `unittest.main()`.",
      "Check the output to ensure the tests passed or failed.",
      "Modify the code if a failure occurs and rerun the tests."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this test code?\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_division(self):\n        self.assertEqual(10 / 2, 6)\nif __name__ == '__main__':\n    unittest.main()\n```",
    "options": [
      "The test logic is incorrect because `10 / 2` is not equal to 6.",
      "`assertEqual()` should be replaced with `assertTrue()`.",
      "The test method is missing a return statement."
    ],
    "answer": "The test logic is incorrect because `10 / 2` is not equal to 6.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to raise an error when an invalid value is provided in the test case.\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_invalid_value(self):\n        self.assertRaises(ValueError, _______)\nif __name__ == '__main__':\n    unittest.main()\n```",
    "answer": "int, \"not_a_number\"",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      },
      {
        "topic": "21. Basic Introduction to Databases (Optional)",
        "subtopics": [
          {
            "subtopic": "Introduction to working with SQL databases in Python using sqlite3",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to insert a new user into the `users` table with columns `id` and `name`.\n```python\nimport sqlite3\nconnection = sqlite3.connect(\"example.db\")\ncursor = connection.cursor()\ncursor.____(\"INSERT INTO users (id, name) VALUES (?, ?)\", (1, 'John Doe'))\nconnection.commit()\n```",
    "answer": "execute",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What SQL command is used to delete a row from a table in SQLite?",
    "options": [
      "`REMOVE FROM`",
      "`DELETE FROM`",
      "`DROP`"
    ],
    "answer": "`DELETE FROM`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `UPDATE` SQL command is used to modify data already present in a table.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to form a correct SQL statement for selecting all rows from the `users` table:",
    "options": ["`SELECT`", "`*`", "`FROM`", "`users`"],
    "answer": ["`SELECT * FROM users`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What does the following code do?\n```python\nimport sqlite3\nconnection = sqlite3.connect(\"example.db\")\ncursor = connection.cursor()\ncursor.execute(\"DELETE FROM users WHERE id = 1\")\nconnection.commit()\n```",
    "options": [
      "Deletes the `users` table.",
      "Deletes the row where the `id` is 1 from the `users` table.",
      "Deletes all rows from the `users` table."
    ],
    "answer": "Deletes the row where the `id` is 1 from the `users` table.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the SQL command with its corresponding action.",
    "options": [
      { "term": "`INSERT INTO`", "match": "Adds new rows to a table." },
      { "term": "`SELECT`", "match": "Retrieves data from a table." },
      { "term": "`UPDATE`", "match": "Modifies existing data in a table." },
      { "term": "`DELETE`", "match": "Removes rows from a table." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following SQL commands are used for CRUD operations? (Select all that apply)",
    "options": [
      "`INSERT INTO`",
      "`DROP`",
      "`SELECT`",
      "`DELETE`"
    ],
    "answer": [
      "`INSERT INTO`",
      "`SELECT`",
      "`DELETE`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps to update a user's name in the `users` table with `id = 1`:",
    "options": [
      "Establish a connection with the database using `sqlite3.connect()`.",
      "Execute the `UPDATE` SQL command using `cursor.execute()`.",
      "Commit the changes with `connection.commit()`.",
      "Close the connection with `connection.close()`."
    ],
    "correctOrder": [
      "Establish a connection with the database using `sqlite3.connect()`.",
      "Execute the `UPDATE` SQL command using `cursor.execute()`.",
      "Commit the changes with `connection.commit()`.",
      "Close the connection with `connection.close()`."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this code?\n```python\nimport sqlite3\nconnection = sqlite3.connect(\"example.db\")\ncursor = connection.cursor()\ncursor.execute(\"INSERT INTO users (id, name) VALUES (1, 'John Doe')\")\nconnection.commit()\nconnection.close()\n```",
    "options": [
      "The `INSERT INTO` command should have placeholders (`?`) instead of direct values.",
      "The table should be created before performing `INSERT INTO`.",
      "The connection should be closed before committing."
    ],
    "answer": "The `INSERT INTO` command should have placeholders (`?`) instead of direct values.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Fill in the blank to update the name of the user with `id = 2` to \"Jane Smith\":\n```python\nimport sqlite3\nconnection = sqlite3.connect(\"example.db\")\ncursor = connection.cursor()\ncursor.____(\"UPDATE users SET name = ? WHERE id = ?\", ('Jane Smith', 2))\nconnection.commit()\n```",
    "answer": "execute",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Performing basic CRUD operations (Create, Read, Update, Delete)",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to run unit tests and see the results in the terminal.\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_addition(self):\n        self.assertEqual(2 + 3, 5)\nif __name__ == '__main__':\n    _______\n```",
    "answer": "unittest.main()",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "What will happen if a unit test passes in Python's `unittest` module?",
    "options": [
      "Nothing is displayed unless a failure or error occurs.",
      "A message will indicate that the test passed successfully.",
      "The test result will display as `PASSED`."
    ],
    "answer": "Nothing is displayed unless a failure or error occurs.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `unittest` module will display a \"PASS\" message when all tests pass successfully.",
    "answer": "False",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to describe a process for running tests using `unittest`.",
    "options": ["`run`", "`tests`", "`main()`", "`unittest`"],
    "answer": ["`unittest.main()`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following unit test code output?\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_subtraction(self):\n        self.assertEqual(5 - 3, 2)\nif __name__ == '__main__':\n    unittest.main()\n```",
    "options": [
      "`Test passed!`",
      "A message showing `.` as the test passed.",
      "The error message from the test."
    ],
    "answer": "A message showing `.` as the test passed.",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the test result with its meaning.",
    "options": [
      { "term": "`.`", "match": "The test passed successfully." },
      { "term": "`F`", "match": "A failure occurred during the test." },
      { "term": "`E`", "match": "The test encountered an error during execution." },
      { "term": "`OK`", "match": "All tests passed successfully." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following commands can be used to run tests in the `unittest` module? (Select all that apply)",
    "options": [
      "`python -m unittest`",
      "`python unittest.run()`",
      "`python -m unittest discover`"
    ],
    "answer": [
      "`python -m unittest`",
      "`python -m unittest discover`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps for running tests in Python’s `unittest` module:",
    "options": [
      "Write test methods inside a test class that inherits from `unittest.TestCase`.",
      "Run the tests using `unittest.main()`.",
      "Check the output to ensure the tests passed or failed.",
      "Modify the code if a failure occurs and rerun the tests."
    ],
    "correctOrder": [
      "Write test methods inside a test class that inherits from `unittest.TestCase`.",
      "Run the tests using `unittest.main()`.",
      "Check the output to ensure the tests passed or failed.",
      "Modify the code if a failure occurs and rerun the tests."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this test code?\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_division(self):\n        self.assertEqual(10 / 2, 6)\nif __name__ == '__main__':\n    unittest.main()\n```",
    "options": [
      "The test logic is incorrect because `10 / 2` is not equal to 6.",
      "`assertEqual()` should be replaced with `assertTrue()`.",
      "The test method is missing a return statement."
    ],
    "answer": "The test logic is incorrect because `10 / 2` is not equal to 6.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the code to raise an error when an invalid value is provided in the test case.\n```python\nimport unittest\nclass TestExample(unittest.TestCase):\n    def test_invalid_value(self):\n        self.assertRaises(ValueError, _______)\nif __name__ == '__main__':\n    unittest.main()\n```",
    "answer": "int, \"not_a_number\"",
    "component": "FillInTheBlank"
  }
]
          }
        ]
      }
    ]
  },
  {
    "phase": "Phase 6: Project Development and Version Control",
    "topics": [
      {
        "topic": "22. Version Control with Git and GitHub",
        "subtopics": [
          {
            "subtopic": "Basic Git commands: git init, git add, git commit, git push",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to initialize a new Git repository:\n```bash\n____\n```",
    "answer": "git init",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which of the following Git commands is used to stage changes before committing them?",
    "options": [
      "`git init`",
      "`git add`",
      "`git commit`"
    ],
    "answer": "`git add`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `git commit` command is used to save your changes to the local Git repository.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create the correct Git command to push your changes to a remote repository:",
    "options": ["`git`", "`push`", "`origin`", "`main`"],
    "answer": ["`git push origin main`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What will the following Git command do?\n```bash\ngit commit -m \"Initial commit\"\n```",
    "options": [
      "Initializes a new Git repository",
      "Stages changes for commit",
      "Commits the changes with the message \"Initial commit\""
    ],
    "answer": "Commits the changes with the message \"Initial commit\"",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the Git command to its description:",
    "options": [
      { "term": "`git init`", "match": "Initializes a new Git repository." },
      { "term": "`git add`", "match": "Stages files to be committed." },
      { "term": "`git commit`", "match": "Commits staged changes to the local repository." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following are valid Git commands for saving changes? (Select all that apply)",
    "options": [
      "`git add .`",
      "`git push origin master`",
      "`git commit -m \"message\"`",
      "`git fetch changes`"
    ],
    "answer": [
      "`git add .`",
      "`git push origin master`",
      "`git commit -m \"message\"`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to push changes to a remote Git repository:",
    "options": [
      "Use `git add` to stage changes.",
      "Commit the changes using `git commit`.",
      "Push the changes to the remote repository with `git push`."
    ],
    "correctOrder": [
      "Use `git add` to stage changes.",
      "Commit the changes using `git commit`.",
      "Push the changes to the remote repository with `git push`."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Git command?\n```bash\ngit commit -a \"Add new feature\"\n```",
    "options": [
      "The `a` flag is used incorrectly with commit.",
      "The commit message should be specified with the `m` flag.",
      "There is no Git repository initialized."
    ],
    "answer": "The commit message should be specified with the `m` flag.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the Git command to push the changes to the `main` branch on the remote repository:\n```bash\ngit push origin _______\n```",
    "answer": "main",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Understanding branching: git branch, git checkout",
            "questionsData": [
  {
    "type": "fill",
    "question": "Fill in the blank to create a new branch in Git:\n```bash\ngit ________ new-branch\n```",
    "answer": "git branch new-branch",
    "component": "FillInTheBlank"
  },
  {
    "type": "multiple-choice",
    "question": "Which Git command is used to switch between branches?",
    "options": [
      "`git checkout`",
      "`git merge`",
      "`git init`"
    ],
    "answer": "`git checkout`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "true-false",
    "question": "The `git branch` command is used to create and list branches in Git.",
    "answer": "True",
    "component": "TrueFalseQuestion"
  },
  {
    "type": "unscramble",
    "question": "Unscramble the words to create the correct Git command to switch to the `dev` branch:",
    "options": ["`checkout`", "`git`", "`dev`"],
    "answer": ["`git checkout dev`"],
    "component": "DragDropQuestion"
  },
  {
    "type": "multiple-choice",
    "question": "What does the following Git command do?\n```bash\ngit branch feature-x\n```",
    "options": [
      "Creates a new branch called `feature-x`",
      "Switches to the `feature-x` branch",
      "Commits the changes to `feature-x`"
    ],
    "answer": "Creates a new branch called `feature-x`",
    "component": "MultipleChoiceQuestion"
  },
  {
    "type": "match",
    "question": "Match the Git command to its description:",
    "options": [
      { "term": "`git branch`", "match": "Creates a new branch or lists all existing branches." },
      { "term": "`git checkout`", "match": "Switches to the specified branch." }
    ],
    "component": "MatchQuestion"
  },
  {
    "type": "multiple-selection",
    "question": "Which of the following commands are used to work with branches in Git? (Select all that apply)",
    "options": [
      "`git branch`",
      "`git checkout`",
      "`git push`"
    ],
    "answer": [
      "`git branch`",
      "`git checkout`"
    ],
    "component": "MultipleSelectionQuestion"
  },
  {
    "type": "order",
    "question": "Arrange the steps in the correct order to create a new branch and switch to it:",
    "options": [
      "Use `git branch new-branch` to create the branch.",
      "Use `git checkout new-branch` to switch to the new branch."
    ],
    "correctOrder": [
      "Use `git branch new-branch` to create the branch.",
      "Use `git checkout new-branch` to switch to the new branch."
    ],
    "component": "OrderQuestion"
  },
  {
    "type": "code-correction",
    "question": "What is wrong with this Git command?\n```bash\ngit checkout -b feature-x\n```",
    "options": [
      "The `b` flag is used correctly, but `feature-x` does not exist.",
      "The command is missing a branch name.",
      "There is nothing wrong with this command."
    ],
    "answer": "There is nothing wrong with this command.",
    "component": "CodeCorrectionQuestion"
  },
  {
    "type": "fill",
    "question": "Complete the command to switch to the `main` branch:\n```bash\ngit ________ main\n```",
    "answer": "git checkout main",
    "component": "FillInTheBlank"
  }
]
          },
          {
            "subtopic": "Working with GitHub repositories: pushing and pulling code",
            "questionsData": []
          }
        ]
      },
      {
        "topic": "23. Building Small Projects",
        "subtopics": [
          {
            "subtopic": "Simple calculator app",
            "questionsData": []
          },
          {
            "subtopic": "To-do list manager (using file I/O)",
            "questionsData": []
          },
          {
            "subtopic": "Number guessing game",
            "questionsData": []
          },
          {
            "subtopic": "Basic web scraper (using requests and BeautifulSoup)",
            "questionsData": []
          }
        ]
      }
    ]
  },
  {
    "phase": "Phase 7: Continuous Learning and Practice",
    "topics": [
      {
        "topic": "24. Project-Based Learning",
        "subtopics": [
          {
            "subtopic": "Participate in coding challenges (e.g., HackerRank, LeetCode)",
            "questionsData": []
          },
          {
            "subtopic": "Build larger projects: Basic API interaction (fetching data from an API)",
            "questionsData": []
          },
          {
            "subtopic": "Simple web app with Flask or Django (optional)",
            "questionsData": []
          }
        ]
      },
      {
        "topic": "25. Explore Specialized Libraries and Fields",
        "subtopics": [
          {
            "subtopic": "Learn libraries like: Web Development (Flask, Django)",
            "questionsData": []
          },
          {
            "subtopic": "Data Science (NumPy, Pandas, Matplotlib)",
            "questionsData": []
          },
          {
            "subtopic": "Automation: selenium, pyautogui",
            "questionsData": []
          }
        ]
      }
    ]
  }
]
